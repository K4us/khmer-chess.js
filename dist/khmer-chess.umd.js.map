{"version":3,"file":"khmer-chess.umd.js","mappings":"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","sources":["webpack:///webpack/universalModuleDefinition","webpack:///./KhmerChess.ts","webpack:///./brain/HVPont.ts","webpack:///./brain/MoveHelper.ts","webpack:///./brain/Rectangle.ts","webpack:///./brain/boardHelper.ts","webpack:///./brain/constant.ts","webpack:///./brain/genMask.ts","webpack:///./brain/index.ts","webpack:///./brain/jsis.ts","webpack:///./index.ts","webpack:///./kpgn/Captured.ts","webpack:///./kpgn/KPGN.ts","webpack:///./kpgn/Move.ts","webpack:///./kpgn/Player.ts","webpack:///./kpgn/Result.ts","webpack:///./kpgn/Timer.ts","webpack:///./kpgn/index.ts","webpack:///./other/EventHandler.ts","webpack:///./other/base64Helper.ts","webpack:///./other/index.ts","webpack:///./other/table.ts","webpack:///./ren/Board.ts","webpack:///./ren/CountUp.ts","webpack:///./ren/Graveyard.ts","webpack:///./ren/KAttacked.ts","webpack:///./ren/KqJumped.ts","webpack:///./ren/Piece.ts","webpack:///./ren/PieceIndex.ts","webpack:///./ren/Point.ts","webpack:///./ren/REN.ts","webpack:///./ren/constant.ts","webpack:///./ren/index.ts","webpack:///webpack/bootstrap","webpack:///webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, function() {\nreturn ","import config from '../package.json';\r\nimport { VERTICAL_NOTE_LETTERS, VERTICAL_NOTE_LETTERS_ENGLISH } from './brain/constant';\r\nimport KPGN from './kpgn/KPGN';\r\nimport Move from './kpgn/Move';\r\nimport asciiTable from './other/table';\r\nimport { PieceIndex } from './ren';\r\nimport Point from './ren/Point';\r\nimport REN from './ren/REN';\r\n\r\nexport default class KhmerChess {\r\n    static title = config.name;\r\n    static version = config.version;\r\n    kpgn: KPGN;\r\n    constructor(renStr?: string) {\r\n        const ren = REN.fromString(renStr);\r\n        this.kpgn = new KPGN(ren);\r\n    }\r\n\r\n    loadKpng(option: object) {\r\n        this.kpgn.fromJson(option);\r\n    }\r\n\r\n    resetBoard() {\r\n        this.kpgn.ren = REN.fromString();\r\n    }\r\n\r\n    getCanMoves(): PieceIndex[] {\r\n        const pieceIndices = this.kpgn.ren.genAllCanMoves();\r\n        return pieceIndices;\r\n    }\r\n    getCanMovePointsByPoint(point: Point): Point[] {\r\n        const canMovePoints = this.kpgn.ren.getCanMovePointsByPoint(point);\r\n        return canMovePoints;\r\n    }\r\n\r\n    validateRENStr(renStr: string) {\r\n        try {\r\n            REN.fromString(renStr);\r\n            return { valid: true, error_number: 0, error: 'No errors.' };\r\n        } catch (error) {\r\n            return { valid: false, error_number: 1, error: error.message };\r\n        }\r\n    }\r\n\r\n    getRENStr() {\r\n        return this.kpgn.ren.toString();\r\n    }\r\n\r\n    get piecesInBoardMultiArray() {\r\n        return this.kpgn.ren.board.piecesMultiArray;\r\n    }\r\n\r\n    get piecesInBoard() {\r\n        return this.kpgn.ren.board.pieces;\r\n    }\r\n\r\n    get piecesInGraveyard() {\r\n        return this.kpgn.ren.graveyard.pieces;\r\n    }\r\n\r\n    // Khmer Portable Game Notation <file-name>.kpgn.json\r\n    getKPGN() {\r\n        return this.kpgn.toJson();\r\n    }\r\n\r\n    loadKpgn(kpgnJosn: any, options: any) {\r\n        this.kpgn = new KPGN(this.kpgn.ren);\r\n    }\r\n\r\n    drawAscii() {\r\n        return asciiTable(this.kpgn.ren);\r\n    }\r\n\r\n    get turn() {\r\n        return this.kpgn.ren.turn;\r\n    }\r\n\r\n    set turn(turn: string) {\r\n        this.kpgn.ren.turn = turn;\r\n    }\r\n\r\n    move(moveFromIndex: number, moveToIndex: number): Move | null {\r\n        const move = this.kpgn.ren.move(moveFromIndex, moveToIndex);\r\n        this.kpgn.addMove(move);\r\n        return move;\r\n    }\r\n\r\n    /**\r\n     * Move all pieces to graveyard except kings\r\n     * -> 4k3/8/8/8/8/8/8/3K4 w ---- -- -.- bhgqghbffffffffFFFFFFFFBHGQGHB\r\n     */\r\n    clearBoard() {\r\n        this.kpgn.ren = REN.fromString('4k3/8/8/8/8/8/8/3K4 w ---- -- -.- bhgqghbffffffffFFFFFFFFBHGQGHB');\r\n    }\r\n\r\n    getHistories() {\r\n        return this.kpgn.moves;\r\n    }\r\n\r\n    static toKhmerNum(englishNum: number) {\r\n        const str = `${englishNum}`;\r\n        const result = str.split('').map((c) => {\r\n            return VERTICAL_NOTE_LETTERS[VERTICAL_NOTE_LETTERS_ENGLISH.indexOf(c)];\r\n        }).join('');\r\n        return result;\r\n    }\r\n}\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","import { HORIZONTAL_CODE_LETTERS } from './constant';\r\nimport jsis from './jsis';\r\n\r\nexport default class HVPont {\r\n    h: string;\r\n    v: number;\r\n    get x() {\r\n        return HORIZONTAL_CODE_LETTERS.indexOf(this.h);\r\n    }\r\n    get y() {\r\n        return this.v - 1;\r\n    }\r\n    get indexCode() {\r\n        return `${this.h}${this.v}`;\r\n    }\r\n    constructor(h: string, v?: string | number) {\r\n        if (jsis.isUndefined(v)) {\r\n            h = h[0];\r\n            v = h[1];\r\n        }\r\n        this.h = h;\r\n        this.v = Number(v);\r\n    }\r\n\r\n}\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","import Piece from '../ren/Piece';\r\nimport PieceIndex from '../ren/PieceIndex';\r\nimport Point from '../ren/Point';\r\nimport boardHelper from './boardHelper';\r\nimport { PIECE_COLOR_BLACK, PIECE_COLOR_WHITE } from './constant';\r\n// abcdecbaooooooooffffffffoooooooooooooooommmmmmmmoooooooohijlkjih\r\nexport type OptionsType = {\r\n    piecesString: string;\r\n    currentTurn: string;\r\n    isQueenMoved: boolean;\r\n    isKingMoved: boolean;\r\n    genCanMove: boolean;\r\n    genCanMoveForAnother: boolean;\r\n};\r\nexport type CalCountPropsType = {\r\n    color: string,\r\n    piecesString: string;\r\n    force: boolean;\r\n};\r\nexport default class MoveHelper implements OptionsType {\r\n    piecesString: string;\r\n    currentTurn: string;\r\n    isQueenMoved: boolean;\r\n    isKingMoved: boolean;\r\n    genCanMove: boolean;\r\n    genCanMoveForAnother: boolean;\r\n\r\n    whiteMoves: PieceIndex[];\r\n    blackMoves: PieceIndex[];\r\n    whiteKingInDanger: Point[] | null;\r\n    whiteKingWillInDanger: Point[] | null;\r\n    blackKingInDanger: Point[] | null;\r\n    blackKingWillInDanger: Point[] | null;\r\n    winColor: string | null;\r\n    stuckColor: string | null;\r\n\r\n    get isWhiteTurn() {\r\n        return Piece.isWhiteColor(this.currentTurn);\r\n    }\r\n    init(option: OptionsType) {\r\n        this.piecesString = option.piecesString;\r\n        this.currentTurn = option.currentTurn;\r\n        this.isQueenMoved = option.isQueenMoved;\r\n        this.isKingMoved = option.isKingMoved;\r\n\r\n        this.genCanMove = option.genCanMove;\r\n        this.genCanMoveForAnother = option.genCanMoveForAnother;\r\n\r\n        this.whiteMoves = [];\r\n        this.blackMoves = [];\r\n\r\n        this.whiteKingInDanger = null;\r\n        this.whiteKingWillInDanger = null;\r\n        this.blackKingInDanger = null;\r\n        this.blackKingWillInDanger = null;\r\n\r\n        this.winColor = null;\r\n        this.stuckColor = null;\r\n    }\r\n\r\n    generateCanMoves() {\r\n        const filter = boardHelper.filterPieceInBoard(this.piecesString);\r\n        this.whiteMoves = filter.whitePieces;\r\n        this.blackMoves = filter.blackPieces;\r\n        const genMoves = (pieceIndices: PieceIndex[]) => {\r\n            pieceIndices.forEach((pieceIndex) => {\r\n                let isHaveMoved = this.isKingMoved;\r\n                if (pieceIndex.piece !== null) {\r\n                    if (pieceIndex.piece !== null && !pieceIndex.piece.isTypeKing) {\r\n                        isHaveMoved = pieceIndex.piece.isTypeQueen ? this.isQueenMoved : false;\r\n                    }\r\n                    const canMovePoints = this.genCanMovePointsByPiecePoint(\r\n                        pieceIndex.point,\r\n                        pieceIndex.piece,\r\n                        this.piecesString,\r\n                        isHaveMoved\r\n                    );\r\n                    pieceIndex.canMovePoints = canMovePoints;\r\n                }\r\n            });\r\n        };\r\n        genMoves(this.whiteMoves);\r\n        genMoves(this.blackMoves);\r\n    }\r\n\r\n    cleanPieceNoMove() {\r\n        const cleanMoves = (pieces: any[]) => {\r\n            let isTrue = true;\r\n            while (isTrue) {\r\n                isTrue = false;\r\n                for (let i = 0; i < pieces.length; i++) {\r\n                    const piece = pieces[i];\r\n                    if (!piece.canMovePoints.length) {\r\n                        pieces.splice(i, 1);\r\n                        isTrue = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        cleanMoves(this.whiteMoves);\r\n        cleanMoves(this.blackMoves);\r\n    }\r\n\r\n    checkIfKingInDanger() {\r\n        this.whiteKingInDanger = boardHelper.getKingInDanger(\r\n            PIECE_COLOR_WHITE,\r\n            this.piecesString\r\n        );\r\n        this.whiteKingWillInDanger = boardHelper.getKingWillInDanger(\r\n            PIECE_COLOR_WHITE,\r\n            this.piecesString\r\n        );\r\n        this.blackKingInDanger = boardHelper.getKingInDanger(\r\n            PIECE_COLOR_BLACK,\r\n            this.piecesString\r\n        );\r\n        this.blackKingWillInDanger = boardHelper.getKingWillInDanger(\r\n            PIECE_COLOR_BLACK,\r\n            this.piecesString\r\n        );\r\n    }\r\n\r\n    genWinLost() {\r\n        if (this.whiteKingInDanger && !this.whiteMoves.length) {\r\n            this.winColor = PIECE_COLOR_BLACK;\r\n        } else if (this.blackKingInDanger && !this.blackMoves.length) {\r\n            this.winColor = PIECE_COLOR_WHITE;\r\n        }\r\n    }\r\n\r\n    getStuck() {\r\n        if (this.winColor) {\r\n            return;\r\n        }\r\n        if (this.isWhiteTurn && !this.whiteMoves.length) {\r\n            this.stuckColor = PIECE_COLOR_WHITE;\r\n        } else if (!this.isWhiteTurn && !this.blackMoves.length) {\r\n            this.stuckColor = PIECE_COLOR_BLACK;\r\n        }\r\n    }\r\n\r\n    calcCanMove(option: OptionsType) {\r\n        this.init(option);\r\n        this.generateCanMoves();\r\n        this.cleanPieceNoMove();\r\n        let moves: PieceIndex[] = [];\r\n        if (this.genCanMove) {\r\n            moves = this.isWhiteTurn ? this.whiteMoves : this.blackMoves;\r\n        }\r\n        let anotherMoves: PieceIndex[] = [];\r\n        if (this.genCanMoveForAnother) {\r\n            anotherMoves = !this.isWhiteTurn ? this.whiteMoves : this.blackMoves;\r\n        }\r\n        return {\r\n            moves,\r\n            anotherMoves,\r\n        };\r\n    }\r\n\r\n    calcState(option: OptionsType) {\r\n        this.init(option);\r\n        this.generateCanMoves();\r\n        this.cleanPieceNoMove();\r\n\r\n        this.checkIfKingInDanger();\r\n        this.genWinLost();\r\n        this.getStuck();\r\n        return {\r\n            blackKingInDanger: this.blackKingInDanger,\r\n            whiteKingInDanger: this.whiteKingInDanger,\r\n            blackKingWillInDanger: this.blackKingWillInDanger,\r\n            whiteKingWillInDanger: this.whiteKingWillInDanger,\r\n            winColor: this.winColor,\r\n            stuckColor: this.stuckColor,\r\n        };\r\n    }\r\n\r\n    calCount({ color, piecesString, force }: CalCountPropsType) {\r\n        return boardHelper.checkCount(color, piecesString, force);\r\n    }\r\n\r\n    genCanMovePointsByPiecePoint(point: Point, piece: Piece,\r\n        piecesString: string, isHasMoved?: boolean) {\r\n        return boardHelper.genCanMovePointsByPiecePoint(\r\n            point.index,\r\n            piece,\r\n            piecesString,\r\n            isHasMoved\r\n        );\r\n    }\r\n}\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","import { Point } from '../ren';\r\nimport { ROW_LAST_INDEX } from './constant';\r\n\r\nexport default class Rectangle {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    constructor(x: number, y: number, width: number, height: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    isContainsPoint(point: Point) {\r\n        const { x, y } = point;\r\n        const isContainsPoint = this.x <= x &&\r\n            (this.x + this.width) >= x &&\r\n            this.y <= y &&\r\n            (this.y + this.height) >= y;\r\n        return isContainsPoint;\r\n    }\r\n\r\n    static isValidPoint(point: Point) {\r\n        return new Rectangle(0, 0, ROW_LAST_INDEX, ROW_LAST_INDEX).isContainsPoint(point);\r\n    }\r\n}\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","import jsis from './jsis';\r\nimport genMask from './genMask';\r\nimport {\r\n    PIECE_COLOR_WHITE,\r\n    PIECE_COLOR_BLACK,\r\n    EMPTY_PIECE,\r\n    ROW_NUMBER,\r\n    PIECE_TYPE_FISH,\r\n    PIECE_TYPE_BOAT,\r\n    PIECE_TYPE_GENERAL,\r\n    PIECE_TYPE_HORSE,\r\n    PIECE_TYPE_KING,\r\n    CELL_COUNT,\r\n} from './constant';\r\nimport Point from '../ren/Point';\r\nimport Piece from '../ren/Piece';\r\nimport Rectangle from './Rectangle';\r\nimport { PieceIndex } from '../ren';\r\n\r\nconst mask = genMask();\r\n\r\nexport class CountUpState {\r\n    countingToNumber: number;\r\n    countingNumber: number;\r\n    constructor(countingNumber: number, countingToNumber: number) {\r\n        this.countingNumber = countingNumber;\r\n        this.countingToNumber = countingToNumber;\r\n    }\r\n}\r\n\r\nclass BoardHelper {\r\n    getCharPieceFromString(piecesString: string, index: number) {\r\n        if (Point.isIndexInBoard(index) && piecesString.length === CELL_COUNT) {\r\n            return piecesString[index];\r\n        }\r\n        return EMPTY_PIECE;\r\n    }\r\n    getCharPieceInPos(index: number, piecesString: string) {\r\n        return this.getCharPieceFromString(piecesString, index);\r\n    }\r\n    getPieceByIndex(index: number, piecesString: string): {\r\n        isValidPiece: boolean, piece: Piece | null\r\n    } {\r\n        const charCode = this.getCharPieceInPos(index, piecesString);\r\n        return {\r\n            isValidPiece: Piece.isValidPiece(charCode),\r\n            piece: Piece.fromCharCode(charCode),\r\n        };\r\n    }\r\n    convertMask = (point1: Point, index: number, color: string) => {\r\n        const sign = Piece.isWhiteColor(color) ? 1 : -1;\r\n        const point2 = Point.fromIndex(index);\r\n        point1.x = point1.x * sign + point2.x;\r\n        point1.y = point1.y * sign + point2.y;\r\n        return Rectangle.isValidPoint(point1) ? point1.index : null;\r\n    };\r\n    getPieceCanMovePoses(index: number, piece: Piece) {\r\n        const pieceIndices: number[] = [];\r\n        mask[piece.type].forEach((_pos: number[]) => {\r\n            const newIndex = this.convertMask(new Point(_pos[0], _pos[1]), index, piece.color);\r\n            if (newIndex !== null) {\r\n                pieceIndices.push(newIndex);\r\n            }\r\n        });\r\n        return pieceIndices;\r\n    }\r\n    getPieceCanMovePosesValid(index: number, piece: Piece, piecesString: string) {\r\n        const _poses = this.getPieceCanMovePoses(index, piece);\r\n        const pieceIndices: number[] = [];\r\n        const n = _poses.length;\r\n        const thisPos = Point.fromIndex(index);\r\n        for (let i = 0; i < n; i++) {\r\n            let p: Point | null = Point.fromIndex(_poses[i]);\r\n            const distPiece = this.getPieceByIndex(p.index, piecesString);\r\n            if (distPiece.isValidPiece) {\r\n                if (distPiece.piece && piece.color === distPiece.piece.color ||\r\n                    (piece.isTypeFish && p.x === thisPos.x)) {\r\n                    p = null;\r\n                }\r\n            } else {\r\n                if (piece.isTypeFish && p.x !== thisPos.x) {\r\n                    p = null;\r\n                }\r\n            }\r\n            if (p !== null && piece.isTypeBoat) {\r\n                const _x = thisPos.x;\r\n                const _y = thisPos.y;\r\n                if (p.x === thisPos.x) {\r\n                    let _n = Math.abs(p.y - thisPos.y);\r\n                    const _s = thisPos.y < p.y ? 1 : -1;\r\n                    while (--_n > 0) {\r\n                        if (this.getPieceByIndex(Point.xyToIndex(_x, _y + _s * _n), piecesString).isValidPiece) {\r\n                            p = null;\r\n                            break;\r\n                        }\r\n                    }\r\n                } else if (p.y === thisPos.y) {\r\n                    let _n = Math.abs(p.x - thisPos.x);\r\n                    const _s = thisPos.x < p.x ? 1 : -1;\r\n                    while (--_n > 0) {\r\n                        if (this.getPieceByIndex(Point.xyToIndex(_x + _s * _n, _y), piecesString).isValidPiece) {\r\n                            p = null;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (!jsis.isNull(p)) {\r\n                pieceIndices.push(_poses[i]);\r\n            }\r\n        }\r\n        return pieceIndices;\r\n    }\r\n    replacePiecesStringAtIndex(piecesString: string, charCode: string, index: number) {\r\n        return piecesString.substring(0, index) + charCode + piecesString.substring(index + 1);\r\n    }\r\n    injectPiece(piecesString: string, index1: number, index2: number) {\r\n        const c = piecesString[index1];\r\n        if (!this.isCharPiecesInBoard(c, piecesString)) {\r\n            return null;\r\n        }\r\n        piecesString = this.replacePiecesStringAtIndex(piecesString, EMPTY_PIECE, index1);\r\n        piecesString = this.replacePiecesStringAtIndex(piecesString, c, index2);\r\n        return piecesString;\r\n    }\r\n    getKingWillInDanger(color: string, piecesString: string) {\r\n        const kingPos = piecesString.indexOf(new Piece(PIECE_TYPE_KING, color).pieceCharCode);\r\n        const n = piecesString.length;\r\n        for (let i = 0; i < n; i++) {\r\n            const p = this.getPieceByIndex(i, piecesString);\r\n            if (p.piece !== null && p.isValidPiece && p.piece.color !== color &&\r\n                p.piece.isTypeBoat) {\r\n                const _poses = this.getPieceCanMovePoses(i, p.piece);\r\n                for (let j = 0; j < _poses.length; j++) {\r\n                    if (_poses[j] === kingPos) {\r\n                        return [Point.fromIndex(i), Point.fromIndex(kingPos)];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    getKingInDanger(color: string, piecesString: string): Point[] | null {\r\n        const kingPos = piecesString.indexOf(new Piece(PIECE_TYPE_KING, color).pieceCharCode);\r\n        const n = piecesString.length;\r\n        for (let i = 0; i < n; i++) {\r\n            const p = this.getPieceByIndex(i, piecesString);\r\n            if (p.piece !== null && p.isValidPiece && p.piece.color !== color) {\r\n                const _poses = this.getPieceCanMovePosesValid(i, p.piece, piecesString);\r\n                for (let j = 0; j < _poses.length; j++) {\r\n                    if (_poses[j] === kingPos) {\r\n                        return [Point.fromIndex(i), Point.fromIndex(kingPos)];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    genCanMovePointsByPiecePoint(index: number, piece: Piece,\r\n        piecesString: string, isHasMoved?: boolean) {\r\n        const _poses = this.getPieceCanMovePosesValid(index, piece, piecesString);\r\n        const isHaveCaptured = this.isHaveCaptured(piecesString);\r\n        if (piece.isTypeKing) {\r\n            if (!isHaveCaptured && !isHasMoved) {\r\n                let p = this.convertMask(new Point(2, 1), index, piece.color);\r\n                if (p && !this.getPieceByIndex(p, piecesString).isValidPiece) {\r\n                    _poses.push(p);\r\n                }\r\n                p = this.convertMask(new Point(-2, 1), index, piece.color);\r\n                if (p && !this.getPieceByIndex(p, piecesString).isValidPiece) {\r\n                    _poses.push(p);\r\n                }\r\n            }\r\n        } else if (piece.isTypeQueen) {\r\n            if (!isHaveCaptured && !isHasMoved) {\r\n                const p = this.convertMask(new Point(-0, 2), index, piece.color);\r\n                if (p && !this.getPieceByIndex(p, piecesString).isValidPiece) {\r\n                    _poses.push(p);\r\n                }\r\n            }\r\n        }\r\n        const n = _poses.length;\r\n        const points: Point[] = [];\r\n        for (let i = 0; i < n; i++) {\r\n            const str = this.injectPiece(piecesString, index, _poses[i]);\r\n            if (str !== null && this.getKingInDanger(piece.color, str) === null) {\r\n                points.push(Point.fromIndex(_poses[i]));\r\n            }\r\n        }\r\n        return points;\r\n    }\r\n    isCharPiecesInBoard(code: string, piecesString: string) {\r\n        return !!~piecesString.indexOf(code);\r\n    }\r\n    getPiecesInBoard(piecesString: string) {\r\n        return piecesString.split('').filter((charCode: string) => {\r\n            return Piece.isValidPiece(charCode);\r\n        });\r\n    }\r\n    isHaveCaptured(piecesString: string) {\r\n        return this.getPiecesInBoard(piecesString).length < ROW_NUMBER * 4;\r\n    }\r\n    filterPieceInBoard(piecesString: string) {\r\n        const whitePieces: PieceIndex[] = [];\r\n        const blackPieces: PieceIndex[] = [];\r\n        for (let i = 0; i < piecesString.length; i++) {\r\n            const charCode = piecesString[i];\r\n            if (Piece.isValidPiece(charCode)) {\r\n                const pieceIndex = new PieceIndex(Point.fromIndex(i), Piece.fromCharCode(charCode));\r\n                if (pieceIndex.piece !== null && pieceIndex.piece.isColorWhite) {\r\n                    whitePieces.push(pieceIndex);\r\n                } else {\r\n                    blackPieces.push(pieceIndex);\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            whitePieces,\r\n            blackPieces,\r\n        };\r\n    }\r\n    extractPiecesToArray(piecesString: string) {\r\n        const piecesStringArr = piecesString.split('');\r\n        const pieceAll: { [key: string]: string[] } = {\r\n            [PIECE_COLOR_BLACK]: [],\r\n            [PIECE_COLOR_WHITE]: [],\r\n        };\r\n        piecesStringArr.forEach((charCode: string) => {\r\n            if (charCode === EMPTY_PIECE) {\r\n                return;\r\n            }\r\n            const piece = Piece.fromCharCode(charCode);\r\n            if (piece) {\r\n                pieceAll[piece.color].push(piece.type);\r\n            }\r\n        });\r\n        return pieceAll;\r\n    }\r\n    isStateCount(c: string, piecesString: string) {\r\n        const allPieces = this.extractPiecesToArray(piecesString);\r\n        return allPieces[c].length === 1;\r\n    }\r\n    checkCountable(color: string, piecesString: string) {\r\n        const pieceAll = this.extractPiecesToArray(piecesString);\r\n        const weaker = pieceAll[color];\r\n        const stronger = pieceAll[Piece.oppositeColor(color)];\r\n        return weaker.length <= 2 && stronger.length >= 2;\r\n    }\r\n    checkCount(color: string, piecesString: string, force: boolean): CountUpState | null {\r\n        const countChar = (str: string[], c: string) => {\r\n            return str.join('').split(c).length - 1;\r\n        };\r\n        const charExist = (str: string[], c: string) => {\r\n            return !!~str.indexOf(c);\r\n        };\r\n\r\n        const pieceAll = this.extractPiecesToArray(piecesString);\r\n        const weaker = pieceAll[color];\r\n        const stronger = pieceAll[Piece.oppositeColor(color)];\r\n        if (weaker.length === 1 && stronger.length > 1) {\r\n            if (!charExist(stronger, PIECE_TYPE_FISH)) {\r\n                let count = 64;\r\n                const toukCount = countChar(stronger, PIECE_TYPE_BOAT);\r\n                if (toukCount) {\r\n                    count = toukCount > 1 ? 8 : 16;\r\n                } else if (countChar(stronger, PIECE_TYPE_GENERAL) > 1) {\r\n                    count = 22;\r\n                } else if (countChar(stronger, PIECE_TYPE_HORSE) > 1) {\r\n                    count = 32;\r\n                } else if (countChar(stronger, PIECE_TYPE_GENERAL)) {\r\n                    count = 44;\r\n                }\r\n                // FIXME: when touk 2 and stronger.length > 8 => start > count\r\n                let start = stronger.length;\r\n                if (start > 4) {\r\n                    start = 4;\r\n                }\r\n                return new CountUpState(start, count);\r\n            }\r\n            return new CountUpState(0, 64);\r\n        } else if (force && this.checkCountable(color, piecesString)) {\r\n            return new CountUpState(0, 64);\r\n        }\r\n        return null;\r\n    }\r\n    isUpgradable(piece: Piece, point: Point) {\r\n        if (piece.isTypeFish) {\r\n            if (piece.isColorBlack && point.y <= 2) {\r\n                return true;\r\n            }\r\n            if (piece.isColorWhite && point.y >= 5) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n};\r\n\r\nexport default new BoardHelper();\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","export const PIECE_COLOR_WHITE = 'w';\r\nexport const PIECE_COLOR_BLACK = 'b';\r\nexport const COLOR_NAMES: { [key: string]: string } = {\r\n    [PIECE_COLOR_BLACK]: 'ខ្មៅ',\r\n    [PIECE_COLOR_WHITE]: 'ស',\r\n};\r\nexport const COLOR_NAMES_ENGLISH: { [key: string]: string } = {\r\n    [PIECE_COLOR_BLACK]: 'black',\r\n    [PIECE_COLOR_WHITE]: 'white',\r\n};\r\n\r\nexport const PIECE_TYPE_BOAT = 'b'; // Boat\r\nexport const PIECE_TYPE_HORSE = 'h'; // Horse\r\nexport const PIECE_TYPE_GENERAL = 'g'; // General\r\nexport const PIECE_TYPE_KING = 'k'; // King\r\nexport const PIECE_TYPE_QUEEN = 'q'; // Queen\r\nexport const PIECE_TYPE_FISH = 'f'; // Fish\r\nexport const PIECE_TYPE_TRANSFORM_FISH = 't'; // Transform fish\r\nexport const PIECE_NAMES: { [key: string]: string } = {\r\n    [PIECE_TYPE_BOAT]: 'ទូក',\r\n    [PIECE_TYPE_HORSE]: 'សេះ',\r\n    [PIECE_TYPE_GENERAL]: 'គោល',\r\n    [PIECE_TYPE_KING]: 'ស្តេច',\r\n    [PIECE_TYPE_QUEEN]: 'នាង',\r\n    [PIECE_TYPE_FISH]: 'ត្រី',\r\n    [PIECE_TYPE_TRANSFORM_FISH]: 'ត្រីបក',\r\n};\r\nexport const PIECE_NAMES_ENGLISH: { [key: string]: string } = {\r\n    [PIECE_TYPE_BOAT]: 'boat',\r\n    [PIECE_TYPE_HORSE]: 'horse',\r\n    [PIECE_TYPE_GENERAL]: 'general',\r\n    [PIECE_TYPE_KING]: 'king',\r\n    [PIECE_TYPE_QUEEN]: 'queen',\r\n    [PIECE_TYPE_FISH]: 'fish',\r\n    [PIECE_TYPE_TRANSFORM_FISH]: 'transformed-fish',\r\n};\r\nexport const EMPTY_PIECE = '.';\r\nexport const PIECE_COLOR_EMPTY = '.';\r\nexport const BOARD_SEPARATOR = '/';\r\n\r\nexport const ROW_NUMBER = 8;\r\nexport const ROW_FIRST_INDEX = 0;\r\nexport const ROW_LAST_INDEX = 7;\r\nexport const CELL_COUNT = ROW_NUMBER * ROW_NUMBER;\r\n\r\nexport const HORIZONTAL_CODE_LETTERS = 'abcdefgh';\r\nexport const HORIZONTAL_NOTE_LETTERS = ['ក', 'ខ', 'គ', 'ឃ', 'ង', 'ច', 'ឆ', 'ជ'];\r\nexport const VERTICAL_NOTE_LETTERS = ['០','១', '២', '៣', '៤', '៥', '៦', '៧', '៨', '៩'];\r\nexport const HORIZONTAL_NOTE_LETTERS_ENGLISH = 'abcdefgh';\r\nexport const VERTICAL_NOTE_LETTERS_ENGLISH = Array.from({ length: 10 }, (_, i) => `${i}`);\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","import {\r\n    PIECE_TYPE_BOAT,\r\n    PIECE_TYPE_HORSE,\r\n    PIECE_TYPE_KING,\r\n    PIECE_TYPE_GENERAL,\r\n    PIECE_TYPE_FISH,\r\n    PIECE_TYPE_TRANSFORM_FISH,\r\n    PIECE_TYPE_QUEEN,\r\n} from './constant';\r\n\r\nexport default function genMask() {\r\n    const mask: { [key: string]: number[][] } = {};\r\n    mask[PIECE_TYPE_BOAT] = [\r\n        [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8],\r\n        [0, -1], [0, -2], [0, -3], [0, -4], [0, -5], [0, -6], [0, -7], [0, -8],\r\n        [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [8, 0],\r\n        [-1, 0], [-2, 0], [-3, 0], [-4, 0], [-5, 0], [-6, 0], [-7, 0], [-8, 0],\r\n    ];\r\n    mask[PIECE_TYPE_HORSE] = [\r\n        [-1, -2],\r\n        [1, -2],\r\n        [-2, -1],\r\n        [2, -1],\r\n        [-1, 2],\r\n        [1, 2],\r\n        [-2, 1],\r\n        [2, 1],\r\n    ];\r\n    mask[PIECE_TYPE_QUEEN] = [\r\n        [-1, -1],\r\n        [1, -1],\r\n        [-1, 1],\r\n        [1, 1],\r\n    ];\r\n    mask[PIECE_TYPE_GENERAL] = mask[PIECE_TYPE_QUEEN].concat([\r\n        [0, 1],\r\n    ]);\r\n    mask[PIECE_TYPE_KING] = mask[PIECE_TYPE_GENERAL].concat([\r\n        [0, -1],\r\n        [1, 0],\r\n        [-1, 0],\r\n    ]);\r\n    mask[PIECE_TYPE_FISH] = [\r\n        [0, 1],\r\n        [-1, 1],\r\n        [1, 1],\r\n    ];\r\n    mask[PIECE_TYPE_TRANSFORM_FISH] = mask[PIECE_TYPE_QUEEN];\r\n    return mask;\r\n}\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","export { default as Rectangle } from './Rectangle';\r\nexport { default as boardHelper } from './boardHelper';\r\nexport { default as genMask } from './genMask';\r\nexport { default as jsis } from './jsis';\r\nexport { default as HVPont } from './HVPont';\r\nexport { default as MoveHelper } from './MoveHelper';\r\nexport { OptionsType, CalCountPropsType } from './MoveHelper';\r\nexport * from './constant';\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","const jsis = {\r\n    isValid(v: any) {\r\n        return !this.isNull(v) && !this.isUndefined(v);\r\n    },\r\n    isNull(v: any) {\r\n        return v === null;\r\n    },\r\n    isUndefined(v: any) {\r\n        return typeof v === 'undefined';\r\n    },\r\n    isString(str: any) {\r\n        return this.isValid(str) && typeof str === 'string';\r\n    },\r\n    isNotEmpty(str: string) {\r\n        // eslint-disable-next-line eqeqeq\r\n        return this.isValidString(str) && str != '';\r\n    },\r\n    isNumber(n: any) {\r\n        return this.isValid(n) && typeof n === 'number';\r\n    },\r\n    isStringNumber(n: string) {\r\n        // eslint-disable-next-line eqeqeq\r\n        return this.isString(n) && n != '' && !isNaN(Number(n));\r\n    },\r\n    isArray(arr: any) {\r\n        return this.isValid(arr) && arr instanceof Array;\r\n    },\r\n    isFunction(f: any) {\r\n        return this.isValid(f) && typeof f === 'function';\r\n    },\r\n    isObject(o: any) {\r\n        return this.isValid(o) && o instanceof Object;\r\n    },\r\n    isBoolean(b: any) {\r\n        return this.isValid(b) && typeof b === 'boolean';\r\n    },\r\n    isTrue(b: any) {\r\n        return this.isValidBoolean(b) && b;\r\n    },\r\n    isFalse(b: any) {\r\n        return this.isValidBoolean(b) && !b;\r\n    },\r\n    isPoint(p: { x: any; y: any; }) {\r\n        const isPoint = this.isValid(p) &&\r\n            this.isValidObject(p) &&\r\n            this.isValidNumber(p.x) &&\r\n            this.isValidNumber(p.y);\r\n        return isPoint;\r\n    },\r\n    isSize(size: { width: any; height: any; }) {\r\n        const isSize = this.isValid(size) &&\r\n            this.isValidObject(size) &&\r\n            this.isValidNumber(size.width) &&\r\n            this.isValidNumber(size.height);\r\n        return isSize;\r\n    },\r\n    isOdd(n: number) {\r\n        return !!(n % 2);\r\n    },\r\n    isEven(n: any) {\r\n        return !this.isOdd(n);\r\n    },\r\n    isUpperCase(str: string) {\r\n        return str === str.toUpperCase();\r\n    },\r\n};\r\n\r\nexport default jsis;\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","export * from './brain';\r\nexport * from './kpgn';\r\nexport * from './ren';\r\nexport * from './other';\r\nexport { default as KhmerChess } from './KhmerChess';\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","\r\nimport Piece from '../ren/Piece';\r\nimport Point from '../ren/Point';\r\n\r\nexport type CapturedPropType = {\r\n    piece: Piece;\r\n    fromBoardPoint: Point;\r\n    toGraveyardPoint: Point;\r\n};\r\nexport default class Captured implements CapturedPropType {\r\n    piece: Piece;\r\n    fromBoardPoint: Point;\r\n    toGraveyardPoint: Point;\r\n    constructor({ piece, fromBoardPoint: fromBoardPoint, toGraveyardPoint: toGraveyardPoint }: CapturedPropType) {\r\n        this.piece = piece;\r\n        this.fromBoardPoint = fromBoardPoint;\r\n        this.toGraveyardPoint = toGraveyardPoint;\r\n    }\r\n}\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","import REN from '../ren/REN';\r\nimport Move from './Move';\r\nimport Player from './Player';\r\nimport Result from './Result';\r\nimport Timer from './Timer';\r\nimport type { Option as TimeOption } from './Timer';\r\nimport type { Option as ResultOption } from './Result';\r\nimport type { Option as PlayerOption } from './Player';\r\nimport base64Helper from '../other/base64Helper';\r\n\r\nexport type Option = {\r\n    event?: string;\r\n    date?: string;\r\n    location?: string;\r\n    players?: {\r\n        white: PlayerOption;\r\n        black: PlayerOption;\r\n    };\r\n    result?: {\r\n        last: {\r\n            whiteWin: boolean;\r\n            blackWin: boolean;\r\n        };\r\n        white: ResultOption;\r\n    };\r\n    moves?: string[];\r\n    ren?: string;\r\n    timer?: TimeOption;\r\n};\r\n\r\nexport default class KPGN {\r\n    event: string = '';\r\n    date: Date | null = null;\r\n    location: string = '';\r\n    players = {\r\n        white: new Player({}),\r\n        black: new Player({}),\r\n    };\r\n    result = {\r\n        last: {\r\n            whiteWin: false,\r\n            blackWin: false,\r\n        },\r\n        white: new Result({}),\r\n    };\r\n\r\n    moves: Move[];\r\n    ren: REN;\r\n    timer: Timer = new Timer({});\r\n\r\n    constructor(ren: REN) {\r\n        this.ren = ren;\r\n        this.moves = [];\r\n    }\r\n\r\n    get isCanMoveNext() {\r\n        return this.latestMove?.isCanMoveNext && this.ren.isCanMoveNext;\r\n    }\r\n\r\n    get latestMove(): Move | null {\r\n        return this.moves[this.moves.length - 1] || null;\r\n    }\r\n\r\n    addMove(move: Move | null) {\r\n        if (move) {\r\n            this.moves.push(move);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    getMove(index: number): Move | null {\r\n        return this.moves[index] || null;\r\n    }\r\n\r\n    loadRENStr(renStr?: string) {\r\n        this.ren = REN.fromString(renStr);\r\n        if (this.latestMove) {\r\n            this.ren.syncWithMove(this.latestMove);\r\n        }\r\n    }\r\n\r\n    loadMovesStrings(moves: string[]) {\r\n        let currentRen = this.ren;\r\n        this.moves = moves.reverse().map((moveStr): Move | never => {\r\n            const move = Move.fromString(moveStr, currentRen);\r\n            if (move === null) {\r\n                throw new Error('Invalid move string');\r\n            }\r\n            currentRen = currentRen.backRen(move);\r\n            return move;\r\n        }).reverse();\r\n        if (this.latestMove) {\r\n            this.ren.syncWithMove(this.latestMove);\r\n        }\r\n    }\r\n\r\n    fromJson(option: Option) {\r\n        try {\r\n            const { ren, moves, timer, result,\r\n                players, location, date, event } = option;\r\n\r\n            this.event = event || this.event;\r\n            this.date = date ? new Date(date) : this.date;\r\n            this.location = location || this.location;\r\n            if (players) {\r\n                this.players = {\r\n                    white: new Player(players.white),\r\n                    black: new Player(players.black),\r\n                };\r\n            }\r\n            if (result) {\r\n                this.result = {\r\n                    last: result.last,\r\n                    white: new Result(result.white),\r\n                };\r\n            }\r\n            this.ren = REN.fromString(ren || '');\r\n            this.loadMovesStrings(moves || []);\r\n            this.timer = new Timer(timer || {});\r\n            return true;\r\n        } catch (error) {\r\n            console.log(error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    toJson() {\r\n        let renStr = this.ren.toString();\r\n        if (this.latestMove) {\r\n            renStr = this.latestMove.renStr;\r\n        }\r\n        return {\r\n            event: this.event,\r\n            date: this.date ? this.date.toString() : '',\r\n            location: this.location,\r\n            players: {\r\n                white: this.players.white.toJson(),\r\n                black: this.players.black.toJson(),\r\n            },\r\n            result: {\r\n                last: {\r\n                    whiteWin: this.result.last.whiteWin,\r\n                    blackWin: this.result.last.blackWin,\r\n                },\r\n                white: this.result.white.toJson(),\r\n            },\r\n            timer: this.timer.toJson(),\r\n            moves: this.moves.map((m) => m.toString()),\r\n            ren: renStr,\r\n        };\r\n    }\r\n\r\n    fromBase64(str: string) {\r\n        const json = JSON.parse(base64Helper.decode(str));\r\n        return this.fromJson(json);\r\n    }\r\n    toBase64() {\r\n        const jsStr = JSON.stringify(this.toJson());\r\n        return base64Helper.encode(jsStr);\r\n    }\r\n}\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","\r\nimport { boardHelper } from '../brain';\r\nimport { KqJumped, PieceIndex, REN } from '../ren';\r\nimport {\r\n    PIECE_FLAG_JUMP,\r\n    PIECE_FLAG_KILL,\r\n    PIECE_FLAG_START_COUNTING,\r\n    PIECE_FLAG_UPGRADE,\r\n} from '../ren/constant';\r\nimport Piece from '../ren/Piece';\r\nimport Point from '../ren/Point';\r\nimport Captured from './Captured';\r\n\r\nexport type Option = {\r\n    piece: Piece;\r\n    moveFrom: Point;\r\n    moveTo: Point;\r\n    isUpgrading?: boolean;\r\n    captured?: Captured;\r\n};\r\nexport default class Move {\r\n    renStr: string;\r\n    boardStatus: {\r\n        attacker: PieceIndex | null,\r\n        winColor: string | null,\r\n        stuckColor: string | null,\r\n        drawCountColor: string | null,\r\n    } = {\r\n            attacker: null,\r\n            winColor: null,\r\n            stuckColor: null,\r\n            drawCountColor: null,\r\n        };\r\n    isStartCounting = false;\r\n    kqJumping: KqJumped\r\n    piece: Piece;\r\n    moveFrom: Point;\r\n    moveTo: Point;\r\n    isUpgrading: boolean;\r\n    captured: Captured | null;\r\n    constructor({ piece, moveFrom, moveTo,\r\n        isUpgrading, captured,\r\n    }: Option) {\r\n        this.piece = piece;\r\n        this.moveFrom = moveFrom;\r\n        this.moveTo = moveTo;\r\n        this.isUpgrading = !!isUpgrading;\r\n        this.captured = captured || null;\r\n        if (boardHelper.isUpgradable(piece, moveTo)) {\r\n            this.isUpgrading = true;\r\n            piece.upgrade();\r\n        }\r\n        this.kqJumping = new KqJumped();\r\n    }\r\n\r\n    setRen(ren: REN) {\r\n        ren.checkBoardStatus(this);\r\n        ren.kqJumped.checkKQMoved(this);\r\n        ren.checkCountStatus(this);\r\n    }\r\n    syncRen(ren: REN) {\r\n        this.renStr = ren.toString();\r\n    }\r\n\r\n    get isCanMoveNext() {\r\n        return !(this.boardStatus.drawCountColor || this.boardStatus.winColor || this.boardStatus.stuckColor);\r\n    }\r\n\r\n    get isWhiteKingJumping() {\r\n        return !!this.kqJumping.whiteKing;\r\n    }\r\n    get isWhiteQueenJumping() {\r\n        return !!this.kqJumping.whiteQueen;\r\n    }\r\n    get isBlackKingJumping() {\r\n        return !!this.kqJumping.blackKing;\r\n    }\r\n    get isBlackQueenJumping() {\r\n        return !!this.kqJumping.blackQueen;\r\n    }\r\n\r\n    get attacker() {\r\n        return this.boardStatus.attacker || null;\r\n    }\r\n\r\n    get winColor() {\r\n        return this.boardStatus.winColor || null;\r\n    }\r\n\r\n    get stuckColor() {\r\n        return this.boardStatus.stuckColor || null;\r\n    }\r\n\r\n    get drawCountColor() {\r\n        return this.boardStatus.drawCountColor || null;\r\n    }\r\n\r\n    get isDraw() {\r\n        return this.stuckColor || this.drawCountColor;\r\n    }\r\n\r\n    get isGameOver() {\r\n        return this.winColor || this.isDraw;\r\n    }\r\n\r\n    static fromString(str: string, ren: REN) {\r\n        const piece = Piece.fromCharCode(str[0]);\r\n        if (piece === null) {\r\n            return null;\r\n        }\r\n        const moveFrom = Point.fromIndexCode(str.substr(1, 2));\r\n        const moveTo = Point.fromIndexCode(str.substr(3, 2));\r\n        const move = new Move({\r\n            piece,\r\n            moveFrom,\r\n            moveTo,\r\n        });\r\n        const killIndex = str.indexOf(PIECE_FLAG_KILL);\r\n        if (!!~killIndex) {\r\n            const match = str.substr(killIndex + 1).match(/^(\\d+)/);\r\n            if (match === null) {\r\n                return null;\r\n            }\r\n            const gyIndex = Number(match[1]);\r\n            const capturedPiece = ren.graveyard.get(gyIndex);\r\n            if (!capturedPiece) {\r\n                throw new Error('Invalid captured index');\r\n            }\r\n            move.captured = new Captured({\r\n                fromBoardPoint: moveTo,\r\n                toGraveyardPoint: Point.fromIndexGraveyardIndex(gyIndex),\r\n                piece: capturedPiece,\r\n            });\r\n\r\n        }\r\n        const jumpingIndex = str.indexOf(PIECE_FLAG_JUMP);\r\n        if (!!~jumpingIndex) {\r\n            const match = str.substr(jumpingIndex + 1).match(/^(\\d+)/);\r\n            if (match === null) {\r\n                return null;\r\n            }\r\n            const n = Number(match[1]);\r\n            move.kqJumping = KqJumped.fromNumber(n);\r\n        }\r\n        const startCountingIndex = str.indexOf(PIECE_FLAG_START_COUNTING);\r\n        if (!!~startCountingIndex) {\r\n            move.isStartCounting = true;\r\n        }\r\n        move.setRen(ren);\r\n        return move;\r\n    }\r\n    toString() {\r\n        const pCode = this.piece.pieceCharCode;\r\n        const fIndexCode = this.moveFrom.indexCode;\r\n        const tIndexCode = this.moveTo.indexCode;\r\n        let flags = '';\r\n        if (this.captured) {\r\n            flags += PIECE_FLAG_KILL + this.captured.toGraveyardPoint.index;\r\n\r\n        }\r\n        if (this.kqJumping.isJumped) {\r\n            flags += PIECE_FLAG_JUMP + this.kqJumping.toNumber();\r\n        }\r\n        if (this.isUpgrading) {\r\n            flags += PIECE_FLAG_UPGRADE;\r\n        }\r\n        if (this.isStartCounting) {\r\n            flags += PIECE_FLAG_START_COUNTING;\r\n        }\r\n        return `${pCode}${fIndexCode}${tIndexCode}${flags}`;\r\n    }\r\n\r\n    getJumpingMessage(isEnglish?: boolean) {\r\n        let jump = '';\r\n        if (isEnglish) {\r\n            if (this.isWhiteKingJumping) {\r\n                jump += ' white king jumping';\r\n            }\r\n            if (this.isWhiteQueenJumping) {\r\n                jump += ' white queen jumping';\r\n            }\r\n            if (this.isBlackKingJumping) {\r\n                jump += ' black king jumping';\r\n            }\r\n            if (this.isBlackQueenJumping) {\r\n                jump += ' black queen jumping';\r\n            }\r\n        } else {\r\n            if (this.isWhiteKingJumping) {\r\n                jump += ' ស្តេច​ស​ភ្លោះ';\r\n            }\r\n            if (this.isWhiteQueenJumping) {\r\n                jump += ' នាង​ស​ភ្លោះ';\r\n            }\r\n            if (this.isBlackKingJumping) {\r\n                jump += ' ស្តេច​ខ្មៅ​ភ្លោះ';\r\n            }\r\n            if (this.isBlackQueenJumping) {\r\n                jump += ' នាង​ខ្មៅ​ភ្លោះ';\r\n            }\r\n        }\r\n        return jump;\r\n    }\r\n    getMessage(isEnglish?: boolean) {\r\n        if (isEnglish) {\r\n            let captured = '';\r\n            if (this.captured) {\r\n                captured = ` captures ${this.captured.piece.titleEnglish}`;\r\n            }\r\n            const upgrade = this.isUpgrading ? ' transforms' : '';\r\n            const jump = this.getJumpingMessage(isEnglish);\r\n            return `${this.piece.titleEnglish} moved from ${this.moveFrom.titleEnglish} to ${this.moveTo.titleEnglish}${upgrade}${captured} ${jump}`;\r\n        } else {\r\n            let captured = '';\r\n            if (this.captured) {\r\n                captured = ` ស៊ី${this.captured.piece.title}`;\r\n            }\r\n            const upgrade = this.isUpgrading ? ' បក' : '';\r\n            const jump = this.getJumpingMessage(isEnglish);\r\n            return `${this.piece.title} ដើរ​ពី ${this.moveFrom.title} ទៅ ${this.moveTo.title}${upgrade}${captured} ${jump}`;\r\n        }\r\n    }\r\n}\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","export type Option = {\r\n    id?: string;\r\n    name?: string;\r\n};\r\nexport default class Player {\r\n    name: string | null;\r\n    id: string | null;\r\n    constructor({ id, name }: Option) {\r\n        this.id = id || '';\r\n        this.name = name || '';\r\n    }\r\n\r\n    toJson() {\r\n        return {\r\n            id: this.id,\r\n            name: this.name,\r\n        };\r\n    }\r\n}\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","export type Option = {\r\n    win?: number;\r\n    draw?: number;\r\n    lost?: number;\r\n};\r\nexport default class Result {\r\n    win: number;\r\n    draw: number;\r\n    lost: number;\r\n    constructor({ win, draw, lost }: Option) {\r\n        this.win = win || 0;\r\n        this.draw = draw || 0;\r\n        this.lost = lost || 0;\r\n    }\r\n\r\n    toJson() {\r\n        return {\r\n            win: this.win,\r\n            draw: this.draw,\r\n            lost: this.lost,\r\n        };\r\n    }\r\n}\r\n\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","export type Option = {\r\n    totalSecond?: number;\r\n    bonusTime?: number;\r\n    currentWhite?: number;\r\n    currentBlack?: number;\r\n};\r\nexport default class Timer {\r\n    bonusTime: number;\r\n    totalSecond: number;\r\n    currentWhite: number;\r\n    currentBlack: number;\r\n    constructor({ totalSecond, bonusTime, currentWhite, currentBlack }: Option) {\r\n        this.bonusTime = bonusTime || 0;\r\n        this.totalSecond = totalSecond || 0;\r\n        this.currentWhite = currentWhite || 0;\r\n        this.currentBlack = currentBlack || 0;\r\n    }\r\n\r\n    fromJson() {\r\n\r\n    }\r\n\r\n    toJson() {\r\n        return {\r\n            totalSecond: this.totalSecond,\r\n            bonusTime: this.bonusTime,\r\n            currentWhite: this.currentWhite,\r\n            currentBlack: this.currentBlack,\r\n        };\r\n    }\r\n}\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","export { default as KPGN } from './KPGN';\r\nexport { default as Move } from './Move';\r\nexport type { Option as MoveOption } from './Move';\r\nexport { default as Captured } from './Captured';\r\nexport { CapturedPropType } from './Captured';\r\nexport { default as Player } from './Player';\r\nexport { default as Result } from './Result';\r\nexport { default as Timer } from './Timer';\r\nexport type { Option as KPGNOption } from './KPGN';\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","export type ListenerType<T> = (data: T) => any;\r\n\r\nexport default class EventHandler {\r\n    _onEventListeners: { [key: string]: any } = {};\r\n    _propEvent: any = [];\r\n    events: any;\r\n    _isLockProp: boolean;\r\n    constructor(options: { events: any }) {\r\n        this._onEventListeners = {};\r\n        this._propEvent = [];\r\n        this.events = options.events;\r\n    }\r\n\r\n    _checkPropEvent() {\r\n        if (this._isLockProp) {\r\n            return;\r\n        }\r\n        while (this._propEvent.length) {\r\n            const event = this._propEvent.shift();\r\n            this._checkOnEvent(event.name, event.data);\r\n        }\r\n    }\r\n\r\n    _addPropEvent(event: string, data?: any) {\r\n        this._propEvent.push({\r\n            name: event,\r\n            data,\r\n        });\r\n        this._checkPropEvent();\r\n    }\r\n\r\n    _guardEventName(eventName?: string) {\r\n        if (!eventName) {\r\n            throw new Error('invalid event name');\r\n        }\r\n    }\r\n\r\n    _checkOnEvent(eventName: string, data?: any) {\r\n        this._guardEventName(eventName);\r\n        this._onEventListeners[eventName] = this._onEventListeners[eventName] || [];\r\n        this._onEventListeners[eventName].forEach((listener: ListenerType<any>) => {\r\n            listener(data);\r\n        });\r\n    }\r\n\r\n    _addOnEventListener(eventName: string, listener: ListenerType<any>) {\r\n        this._guardEventName(eventName);\r\n        this._onEventListeners[eventName] = this._onEventListeners[eventName] || [];\r\n        this._onEventListeners[eventName].push(listener);\r\n    }\r\n\r\n    _removeOnEventListener(eventName: string, listener: ListenerType<any>) {\r\n        this._guardEventName(eventName);\r\n        this._onEventListeners[eventName] = this._onEventListeners[eventName] || [];\r\n        const index = this._onEventListeners[eventName].indexOf(listener);\r\n        ~index && this._onEventListeners[eventName].splice(index, 1);\r\n    }\r\n}\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","// https://stackoverflow.com/questions/246801/how-can-you-encode-a-string-to-base64-in-javascript\r\n/**\r\n*\r\n*  Base64 encode / decode\r\n*  http://www.webtoolkit.info/\r\n*\r\n**/\r\nvar Base64 = {\r\n\r\n    // private property\r\n    _keyStr: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\r\n\r\n    // public method for encoding\r\n    encode: function (input: string) {\r\n        var output = '';\r\n        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\r\n        var i = 0;\r\n\r\n        input = Base64._utf8_encode(input);\r\n\r\n        while (i < input.length) {\r\n\r\n            chr1 = input.charCodeAt(i++);\r\n            chr2 = input.charCodeAt(i++);\r\n            chr3 = input.charCodeAt(i++);\r\n\r\n            enc1 = chr1 >> 2;\r\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n            enc4 = chr3 & 63;\r\n\r\n            if (isNaN(chr2)) {\r\n                enc3 = enc4 = 64;\r\n            } else if (isNaN(chr3)) {\r\n                enc4 = 64;\r\n            }\r\n\r\n            output = output +\r\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\r\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\r\n        }\r\n        return output;\r\n    },\r\n\r\n    // public method for decoding\r\n    decode: function (input: string) {\r\n        var output = '';\r\n        var chr1, chr2, chr3;\r\n        var enc1, enc2, enc3, enc4;\r\n        var i = 0;\r\n\r\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\r\n\r\n        while (i < input.length) {\r\n\r\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\r\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\r\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\r\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\r\n\r\n            chr1 = (enc1 << 2) | (enc2 >> 4);\r\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\r\n            chr3 = ((enc3 & 3) << 6) | enc4;\r\n\r\n            output = output + String.fromCharCode(chr1);\r\n\r\n            if (enc3 != 64) {\r\n                output = output + String.fromCharCode(chr2);\r\n            }\r\n            if (enc4 != 64) {\r\n                output = output + String.fromCharCode(chr3);\r\n            }\r\n        }\r\n\r\n        output = Base64._utf8_decode(output);\r\n\r\n        return output;\r\n    },\r\n\r\n    // private method for UTF-8 encoding\r\n    _utf8_encode: function (string: string) {\r\n        string = string.replace(/\\r\\n/g, '\\n');\r\n        var utftext = '';\r\n\r\n        for (var n = 0; n < string.length; n++) {\r\n\r\n            var c = string.charCodeAt(n);\r\n\r\n            if (c < 128) {\r\n                utftext += String.fromCharCode(c);\r\n            }\r\n            else if ((c > 127) && (c < 2048)) {\r\n                utftext += String.fromCharCode((c >> 6) | 192);\r\n                utftext += String.fromCharCode((c & 63) | 128);\r\n            }\r\n            else {\r\n                utftext += String.fromCharCode((c >> 12) | 224);\r\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\r\n                utftext += String.fromCharCode((c & 63) | 128);\r\n            }\r\n        }\r\n        return utftext;\r\n    },\r\n\r\n    // private method for UTF-8 decoding\r\n    _utf8_decode: function (utftext: string) {\r\n        var string = '';\r\n        var i = 0;\r\n        var c, c1, c2 = 0;\r\n        c = c1 = c2 = 0;\r\n\r\n        while (i < utftext.length) {\r\n\r\n            c = utftext.charCodeAt(i);\r\n\r\n            if (c < 128) {\r\n                string += String.fromCharCode(c);\r\n                i++;\r\n            }\r\n            else if ((c > 191) && (c < 224)) {\r\n                c1 = utftext.charCodeAt(i + 1);\r\n                string += String.fromCharCode(((c & 31) << 6) | (c1 & 63));\r\n                i += 2;\r\n            }\r\n            else {\r\n                c1 = utftext.charCodeAt(i + 1);\r\n                c2 = utftext.charCodeAt(i + 2);\r\n                string += String.fromCharCode(((c & 15) << 12) | ((c1 & 63) << 6) | (c2 & 63));\r\n                i += 3;\r\n            }\r\n        }\r\n        return string;\r\n    },\r\n};\r\n\r\nexport default Base64;","export { default as EventHandler } from './EventHandler';\r\nexport { ListenerType } from './EventHandler';\r\nexport { default as table } from './table';\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","import REN from '../ren/REN';\r\n\r\nexport default function asciiTable(ren: REN) {\r\n  const arr = ren.board.piecesMultiArray;\r\n  const str = '  ┏━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┓';\r\n  const result = arr.reverse().reduce((s, subArr, i) => {\r\n    const rs = subArr.map((p) => ` ${p ? p.pieceCharCode : ' '} `).join('┃');\r\n    const bottom = i === arr.length - 1 ? '┗━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┛' : '┣━━━╋━━━╋━━━╋━━━╋━━━╋━━━╋━━━╋━━━┫';\r\n    s += `\r\n${8 - i} ┃${rs}┃\r\n  ${bottom}`;\r\n    return s;\r\n  }, str);\r\n  const gyTStr = ren.graveyard.pieces.map(() => '━━━').join('┳');\r\n  const gyStr = ren.graveyard.pieces.map((p) => ` ${p ? p.pieceCharCode : ' '} `).join('┃');\r\n  const gyBStr = ren.graveyard.pieces.map(() => '━━━').join('┻');\r\n  const graveyardStr = `  ┏${gyTStr}┓\r\n  ┃${gyStr}┃\r\n  ┗${gyBStr}┛`;\r\n  return `${result}\r\n    a   b   c   d   e   f   g   h\r\n${graveyardStr}`;\r\n}\r\n\r\n/*\r\n  ┏━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┓\r\n8 ┃   ┃   ┃   ┃   ┃ k ┃   ┃   ┃   ┃\r\n  ┣━━━╋━━━╋━━━╋━━━╋━━━╋━━━╋━━━╋━━━┫\r\n7 ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃\r\n  ┣━━━╋━━━╋━━━╋━━━╋━━━╋━━━╋━━━╋━━━┫\r\n6 ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃\r\n  ┣━━━╋━━━╋━━━╋━━━╋━━━╋━━━╋━━━╋━━━┫\r\n5 ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃\r\n  ┣━━━╋━━━╋━━━╋━━━╋━━━╋━━━╋━━━╋━━━┫\r\n4 ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃\r\n  ┣━━━╋━━━╋━━━╋━━━╋━━━╋━━━╋━━━╋━━━┫\r\n3 ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃\r\n  ┣━━━╋━━━╋━━━╋━━━╋━━━╋━━━╋━━━╋━━━┫\r\n2 ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃   ┃\r\n  ┣━━━╋━━━╋━━━╋━━━╋━━━╋━━━╋━━━╋━━━┫\r\n1 ┃   ┃   ┃   ┃ K ┃   ┃   ┃   ┃   ┃\r\n  ┗━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┛\r\n    a   b   c   d   e   f   g   h\r\n  ┏━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┳━━━┓\r\n  ┃ b ┃ h ┃ g ┃ q ┃ g ┃ h ┃ b ┃ f ┃ f ┃ f ┃ f ┃ f ┃ f ┃ f ┃ f ┃ F ┃ F ┃ F ┃ F ┃ F ┃ F ┃ F ┃ F ┃ B ┃ H ┃ G ┃ Q ┃ G ┃ H ┃ B ┃\r\n  ┗━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┻━━━┛\r\n */\r\n\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","import Piece from './Piece';\r\nimport PieceIndex from './PieceIndex';\r\nimport { DEFAULT_BOARD_STR } from './constant';\r\nimport { BOARD_SEPARATOR, CELL_COUNT, EMPTY_PIECE, ROW_NUMBER } from '../brain/constant';\r\nimport Point from './Point';\r\n\r\n/**\r\n * BHGQKGHB/8/FFFFFFFF/8/8/ffffffff/8/bhgkqghb => bhgqkghb/......../ffffffff/......../......../FFFFFFFF/......../BHGKQGHB\r\n */\r\n\r\nexport default class Board {\r\n    pieceIndices = Array.from({\r\n        length: CELL_COUNT,\r\n    }, (_, i) => {\r\n        const point = Point.fromIndex(i);\r\n        return new PieceIndex(point, null);\r\n    });\r\n\r\n    constructor(boardStr?: string) {\r\n        if (!boardStr) {\r\n            boardStr = DEFAULT_BOARD_STR;\r\n        }\r\n        const newBoardStr = this.extract(boardStr).replace(/\\//g, '');\r\n        if (newBoardStr.length < CELL_COUNT ||\r\n            !Piece.isValidPiecesString(newBoardStr)) {\r\n            throw new Error(`Invalid board string ${boardStr}`);\r\n        }\r\n        this.pieceIndices = newBoardStr.split('').map((charCode: string, i: number) => {\r\n            const point = Point.fromIndex(i);\r\n            return new PieceIndex(point, charCode === EMPTY_PIECE ? null : Piece.fromCharCode(charCode));\r\n        });\r\n    }\r\n\r\n    get piecesMultiArray() {\r\n        const arr: Piece[][] = [[], [], [], [], [], [], [], []];\r\n        this.pieceIndices.forEach((pieceIndex) => {\r\n            if (pieceIndex.piece !== null) {\r\n                arr[pieceIndex.point.y][pieceIndex.point.x] = pieceIndex.piece;\r\n            }\r\n        });\r\n        return arr;\r\n    }\r\n\r\n    get pieces() {\r\n        return this.pieceIndices.map((pieceIndex) => {\r\n            return pieceIndex.piece;\r\n        });\r\n    }\r\n\r\n    get whiteKing() {\r\n        return this.pieceIndices.find((pieceIndex) => {\r\n            return pieceIndex.piece && pieceIndex.piece.isTypeKing && pieceIndex.piece.isColorWhite;\r\n        });\r\n    }\r\n\r\n    get blackKing() {\r\n        return this.pieceIndices.find((pieceIndex) => {\r\n            return pieceIndex.piece && pieceIndex.piece.isTypeKing && pieceIndex.piece.isColorBlack;\r\n        });\r\n    }\r\n\r\n    getKing(color: string) {\r\n        return Piece.isWhiteColor(color) ? this.whiteKing : this.blackKing;\r\n    }\r\n\r\n    compress(str: string) {\r\n        const reg = new RegExp(`(\\\\${EMPTY_PIECE}+)`, 'g');\r\n        return str.replace(reg, ($1: any) => $1.length);\r\n    }\r\n\r\n    extract(str: string) {\r\n        return str.replace(/(\\d+)/g, ($1: any) => {\r\n            // $1 == 3 => '...', bh6 => 'bh......'\r\n            return Array.from({\r\n                length: $1,\r\n            }, () => EMPTY_PIECE).join('');\r\n        });\r\n    }\r\n\r\n    toStringFull(pieceIndices: PieceIndex[] = this.pieceIndices) {\r\n        const str = pieceIndices.map((pieceIndex, i) => {\r\n            const p = pieceIndex.toPieceCharCode();\r\n            if (i && i % ROW_NUMBER === 0 && i !== CELL_COUNT) {\r\n                return `${BOARD_SEPARATOR}${p}`;\r\n            }\r\n            return p;\r\n        }).join('');\r\n        return str;\r\n    }\r\n    toStringFullNoSeparate() {\r\n        let str = this.toStringFull();\r\n        str = str.replace(/\\//g, '');\r\n        return str;\r\n    }\r\n\r\n    toString(pieceIndices?: PieceIndex[]) {\r\n        let str = this.toStringFull(pieceIndices);\r\n        str = this.compress(str);\r\n        return str;\r\n    }\r\n\r\n    getPieceAtIndex(index: number): Piece | null {\r\n        return this.pieceIndices[index].piece;\r\n    }\r\n\r\n    setPieceAtIndex(index: number, piece: Piece | null) {\r\n        this.pieceIndices[index].piece = piece;\r\n    }\r\n}\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","import { PIECE_COLOR_BLACK, PIECE_COLOR_WHITE } from '../brain';\r\nimport { NOT_SET } from './constant';\r\n\r\n// 23.-\r\nexport default class CountUp {\r\n    countingToNumber: number | null = null;\r\n    countingNumber: number | null = null;\r\n    isCountingUp = false;\r\n    color: string | null = null;\r\n\r\n    get isWhite() {\r\n        return this.color === PIECE_COLOR_WHITE;\r\n    }\r\n    get isBlack() {\r\n        return this.color === PIECE_COLOR_BLACK;\r\n    }\r\n    get isWhiteCounting() {\r\n        return this.isCounting && this.isWhite;\r\n    }\r\n    get isBlackCounting() {\r\n        return this.isCounting && !this.isWhite;\r\n    }\r\n    get isCounting() {\r\n        return this.countingToNumber !== null;\r\n    }\r\n    get isCountingOut() {\r\n        if (!this.isCounting || this.countingNumber === null ||\r\n            this.countingToNumber === null) {\r\n            return false;\r\n        }\r\n        return this.countingNumber >= this.countingToNumber;\r\n    }\r\n\r\n    set(color: string, countingToNumber: number, countingNumber: number) {\r\n        this.color = color;\r\n        this.countingToNumber = countingToNumber;\r\n        this.countingNumber = countingNumber;\r\n    }\r\n\r\n    clear() {\r\n        this.color = null;\r\n        this.countingToNumber = null;\r\n        this.countingNumber = null;\r\n    }\r\n\r\n    checkUp(color: string) {\r\n        if (this.countingNumber !== null && color === this.color) {\r\n            this.countingNumber++;\r\n            this.isCountingUp = true;\r\n        } else {\r\n            this.isCountingUp = false;\r\n        }\r\n    }\r\n\r\n    static fromString(countUpStr: string) {\r\n        if (!countUpStr) {\r\n            countUpStr = `${NOT_SET}.${NOT_SET}@${NOT_SET}`;\r\n        }\r\n        const countUp = new CountUp();\r\n        const countingUp = countUpStr.split('@');\r\n        if (countingUp[1] !== NOT_SET) {\r\n            countUp.countingToNumber = Number(countingUp[1]);\r\n        }\r\n        const countingUpWB = countingUp[0].split('.');\r\n        if (countingUpWB[0] !== NOT_SET) {\r\n            countUp.color = PIECE_COLOR_WHITE;\r\n            countUp.countingNumber = Number(countingUpWB[0]);\r\n        }\r\n        if (countingUpWB[1] !== NOT_SET) {\r\n            countUp.color = PIECE_COLOR_BLACK;\r\n            countUp.countingNumber = Number(countingUpWB[1]);\r\n        }\r\n        return countUp;\r\n    }\r\n\r\n    toString() {\r\n        const whiteCountingDow = this.isCounting && this.isWhite ? this.countingNumber : NOT_SET;\r\n        const blackCountingDow = this.isCounting && !this.isWhite ? this.countingNumber : NOT_SET;\r\n        let str = `${whiteCountingDow}`;\r\n        str += `.${blackCountingDow}`;\r\n        str += `@${this.isCounting ? this.countingToNumber : NOT_SET}`;\r\n        return str;\r\n    }\r\n}\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","import Piece from './Piece';\r\n\r\nexport default class Graveyard {\r\n    pieces: Piece[] = [];\r\n    get lastIndex() {\r\n        return this.pieces.length - 1;\r\n    }\r\n    get(index: number) {\r\n        return this.pieces[index];\r\n    }\r\n    removeAtIndex(index: number) {\r\n        if (!!this.get(index)) {\r\n            this.pieces.splice(index, 1);\r\n        }\r\n        return true;\r\n    }\r\n    constructor(graveyardStr?: string) {\r\n        if (graveyardStr) {\r\n            if (graveyardStr.length > 30 ||\r\n                !Piece.isValidPiecesString(graveyardStr, true)) {\r\n                throw new Error(`Invalid graveyard string ${graveyardStr}`);\r\n            }\r\n            this.pieces = graveyardStr.split('').map((charCode, i) => {\r\n                const p = Piece.fromCharCode(charCode);\r\n                return p;\r\n            }).filter((piece) => {\r\n                return piece !== null;\r\n            }) as Piece[];\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        return this.pieces.map((p) => {\r\n            return p.pieceCharCode;\r\n        }).join('');\r\n    }\r\n}\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","import { PIECE_TYPE_KING } from '../brain/constant';\r\nimport { NOT_SET } from './constant';\r\nimport Piece from './Piece';\r\n\r\n/**\r\n * King has attacked, this will effect jumping\r\n */\r\nexport default class KAttacked {\r\n    whiteKing = false;\r\n    blackKing = false;\r\n    constructor(kAttackedStr?: string) {\r\n        if (kAttackedStr) {\r\n            this.whiteKing = !!~kAttackedStr.indexOf(Piece.toWhiteCharCode(PIECE_TYPE_KING));\r\n            this.blackKing = !!~kAttackedStr.indexOf(PIECE_TYPE_KING);\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        let str = `${this.whiteKing ? Piece.toWhiteCharCode(PIECE_TYPE_KING) : NOT_SET}`;\r\n        str += `${this.blackKing ? PIECE_TYPE_KING : NOT_SET}`;\r\n        return str;\r\n    }\r\n}\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","import { PIECE_TYPE_KING, PIECE_TYPE_QUEEN } from '../brain/constant';\r\nimport { Move } from '../kpgn';\r\nimport { NOT_SET } from './constant';\r\nimport Piece from './Piece';\r\n\r\n/**\r\n * King or Queen has jumped, the will effect jumping\r\n */\r\nexport default class KqJumped {\r\n    whiteKing = false;\r\n    whiteQueen = false;\r\n    blackKing = false;\r\n    blackQueen = false;\r\n    keyCodes: { [key: string]: string } = {\r\n        blackKing: Piece.toWhiteCharCode(PIECE_TYPE_QUEEN),\r\n        whiteKing: Piece.toWhiteCharCode(PIECE_TYPE_KING),\r\n        whiteQueen: PIECE_TYPE_KING,\r\n        blackQueen: PIECE_TYPE_QUEEN,\r\n    };\r\n    codeKeys: { [key: string]: string } = {\r\n        [Piece.toWhiteCharCode(PIECE_TYPE_QUEEN)]: 'blackKing: ',\r\n        [Piece.toWhiteCharCode(PIECE_TYPE_KING)]: 'whiteKing: ',\r\n        [PIECE_TYPE_KING]: 'whiteQueen: ',\r\n        [PIECE_TYPE_QUEEN]: 'blackQueen: ',\r\n    };\r\n    constructor(kqJumpedStr?: string) {\r\n        if (kqJumpedStr) {\r\n            this.whiteKing = !!~kqJumpedStr.indexOf(Piece.toWhiteCharCode(PIECE_TYPE_KING));\r\n            this.whiteQueen = !!~kqJumpedStr.indexOf(Piece.toWhiteCharCode(PIECE_TYPE_QUEEN));\r\n            this.blackKing = !!~kqJumpedStr.indexOf(PIECE_TYPE_KING);\r\n            this.blackQueen = !!~kqJumpedStr.indexOf(PIECE_TYPE_QUEEN);\r\n        }\r\n    }\r\n\r\n    get isJumped() {\r\n        return this.whiteKing || this.whiteQueen || this.blackKing || this.blackQueen;\r\n    }\r\n\r\n    setProp(key: string, value: boolean) {\r\n        (this as any)[key] = value;\r\n    }\r\n    applyJumping(propKey: string, move: Move) {\r\n        if (!(this as any)[propKey]) {\r\n            move.kqJumping.setProp(propKey, true);\r\n            this.setProp(propKey, true);\r\n        }\r\n    }\r\n\r\n    checkKQMoved(move: Move) {\r\n        if (move.attacker || move.captured) {\r\n            this.applyJumping('whiteKing', move);\r\n            this.applyJumping('blackKing', move);\r\n            this.applyJumping('whiteQueen', move);\r\n            this.applyJumping('blackQueen', move);\r\n        }\r\n        const piece = move.piece;\r\n        if (piece.isTypeKing) {\r\n            if (piece.isColorWhite) {\r\n                this.applyJumping('whiteKing', move);\r\n            } else {\r\n                this.applyJumping('blackKing', move);\r\n            }\r\n        } else if (piece.isTypeQueen) {\r\n            if (piece.isColorWhite) {\r\n                this.applyJumping('whiteQueen', move);\r\n            } else {\r\n                this.applyJumping('blackQueen', move);\r\n            }\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        let str = `${this.whiteKing ? Piece.toWhiteCharCode(PIECE_TYPE_KING) : NOT_SET}`;\r\n        str += `${this.whiteQueen ? Piece.toWhiteCharCode(PIECE_TYPE_QUEEN) : NOT_SET}`;\r\n        str += `${this.blackKing ? PIECE_TYPE_KING : NOT_SET}`;\r\n        str += `${this.blackQueen ? PIECE_TYPE_QUEEN : NOT_SET}`;\r\n        return str;\r\n    }\r\n\r\n    toNumber() {\r\n        let str = `${this.whiteKing ? 1 : 0}`;\r\n        str += `${this.whiteQueen ? 1 : 0}`;\r\n        str += `${this.blackKing ? 1 : 0}`;\r\n        str += `${this.blackQueen ? 1 : 0}`;\r\n        return parseInt(str, 2);\r\n    }\r\n    public static fromNumber(n: number) {\r\n        const b = ('0000' + Number(n).toString(2)).substr(-4);\r\n        const kqJumped = new KqJumped();\r\n        kqJumped.whiteKing = b[0] === '1';\r\n        kqJumped.whiteQueen = b[1] === '1';\r\n        kqJumped.blackKing = b[2] === '1';\r\n        kqJumped.blackQueen = b[3] === '1';\r\n        return kqJumped;\r\n    }\r\n}\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","import {\r\n    PIECE_COLOR_BLACK,\r\n    PIECE_COLOR_WHITE,\r\n    PIECE_TYPE_TRANSFORM_FISH,\r\n    PIECE_TYPE_FISH,\r\n    PIECE_TYPE_BOAT,\r\n    PIECE_TYPE_HORSE,\r\n    PIECE_TYPE_GENERAL,\r\n    PIECE_TYPE_KING,\r\n    PIECE_TYPE_QUEEN,\r\n    EMPTY_PIECE,\r\n    BOARD_SEPARATOR,\r\n    PIECE_NAMES,\r\n    COLOR_NAMES,\r\n    PIECE_NAMES_ENGLISH,\r\n    COLOR_NAMES_ENGLISH,\r\n} from '../brain/constant';\r\nimport jsis from '../brain/jsis';\r\n\r\nexport default class Piece {\r\n    type: string;\r\n    color: string;\r\n    get colorOpponent() {\r\n        return Piece.oppositeColor(this.color);\r\n    }\r\n    get pieceCharCode() {\r\n        if (this.isColorWhite) {\r\n            return this.pieceCharCodeWhite;\r\n        }\r\n        return this.type;\r\n    }\r\n    get pieceCharCodeWhite() {\r\n        return Piece.toWhiteCharCode(this.type);\r\n    }\r\n\r\n    get title() {\r\n        return `${PIECE_NAMES[this.type]}${COLOR_NAMES[this.color]}`;\r\n    }\r\n    get titleEnglish() {\r\n        return `${COLOR_NAMES_ENGLISH[this.color]}-${PIECE_NAMES_ENGLISH[this.type]}`;\r\n    }\r\n    _isTypeEqual(type: string) {\r\n        return this.type === type;\r\n    }\r\n    get isTypeKing() {\r\n        return this._isTypeEqual(PIECE_TYPE_KING);\r\n    }\r\n    get isTypeQueen() {\r\n        return this._isTypeEqual(PIECE_TYPE_QUEEN);\r\n    }\r\n    get isTypeBoat() {\r\n        return this._isTypeEqual(PIECE_TYPE_BOAT);\r\n    }\r\n    get isTypeHorse() {\r\n        return this._isTypeEqual(PIECE_TYPE_HORSE);\r\n    }\r\n    get isTypeGeneral() {\r\n        return this._isTypeEqual(PIECE_TYPE_GENERAL);\r\n    }\r\n    get isTypeFish() {\r\n        return this._isTypeEqual(PIECE_TYPE_FISH);\r\n    }\r\n    get isTypeTransformedFish() {\r\n        return this._isTypeEqual(PIECE_TYPE_TRANSFORM_FISH);\r\n    }\r\n    get isColorBlack() {\r\n        return Piece.isBlackColor(this.color);\r\n    }\r\n    get isColorWhite() {\r\n        return Piece.isWhiteColor(this.color);\r\n    }\r\n\r\n\r\n    constructor(type: string, color: string) {\r\n        this.type = Piece.toNormalCharCode(type);\r\n        this.color = color;\r\n    }\r\n\r\n    static fromCharCode(charCode: string) {\r\n        if (!Piece.isValidPiece(charCode)) {\r\n            return null;\r\n        }\r\n        const color = Piece.isWhiteCharCode(charCode) ? PIECE_COLOR_WHITE : PIECE_COLOR_BLACK;\r\n        const type = Piece.toNormalCharCode(charCode);\r\n        return new Piece(type, color);\r\n    }\r\n\r\n    get originPiece(): Piece {\r\n        if (this.isTypeTransformedFish) {\r\n            return new Piece(PIECE_TYPE_FISH, this.color);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    static get pieceChars() {\r\n        return [\r\n            PIECE_TYPE_BOAT,\r\n            PIECE_TYPE_HORSE,\r\n            PIECE_TYPE_GENERAL,\r\n            PIECE_TYPE_KING,\r\n            PIECE_TYPE_QUEEN,\r\n            PIECE_TYPE_FISH,\r\n            PIECE_TYPE_TRANSFORM_FISH,\r\n        ];\r\n    }\r\n    static get colorChars() {\r\n        return [\r\n            PIECE_COLOR_WHITE,\r\n            PIECE_COLOR_BLACK,\r\n        ];\r\n    }\r\n\r\n\r\n    static toWhiteCharCode(charCode: string) {\r\n        return charCode.toUpperCase();\r\n    }\r\n    static isWhiteCharCode(charCode: string) {\r\n        return jsis.isUpperCase(charCode);\r\n    }\r\n    static toBlackCharCode(charCode: string) {\r\n        return charCode.toLowerCase();\r\n    }\r\n    static toNormalCharCode(charCode: string) {\r\n        return Piece.toBlackCharCode(charCode);\r\n    }\r\n\r\n    static isValidPiece(charCode: string) {\r\n        return charCode !== EMPTY_PIECE;\r\n    }\r\n    static isWhiteColor(color: string) {\r\n        return color === PIECE_COLOR_WHITE;\r\n    }\r\n    static isBlackColor(color: string) {\r\n        return color === PIECE_COLOR_BLACK;\r\n    }\r\n    static oppositeColor(color: any) {\r\n        return Piece.isWhiteColor(color) ? PIECE_COLOR_BLACK : PIECE_COLOR_WHITE;\r\n    }\r\n\r\n    static isValidPiecesString(str: string, onlyPiece?: boolean) {\r\n        const ruler = onlyPiece ? allPiecesString.filter((c: string) => {\r\n            return !~[EMPTY_PIECE, BOARD_SEPARATOR].indexOf(c);\r\n        }) : allPiecesString;\r\n        return !str.split('').some((c: string) => {\r\n            return !~ruler.indexOf(c);\r\n        });\r\n    }\r\n\r\n    upgrade() {\r\n        if (this.isTypeFish) {\r\n            this.type = PIECE_TYPE_TRANSFORM_FISH;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    downgrade() {\r\n        if (this.isTypeTransformedFish) {\r\n            this.type = PIECE_TYPE_FISH;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    clone():Piece {\r\n        return Piece.fromCharCode(this.pieceCharCode) as Piece;\r\n    }\r\n}\r\n\r\nconst allPiecesString: string[] = [\r\n    ...Piece.pieceChars,\r\n    ...Piece.pieceChars.map((pieceChar: string) => {\r\n        return Piece.toWhiteCharCode(pieceChar);\r\n    }),\r\n    EMPTY_PIECE,\r\n    BOARD_SEPARATOR,\r\n];\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>, K4us Net <k4us.net@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","import { EMPTY_PIECE } from '../brain/constant';\r\nimport Piece from './Piece';\r\nimport Point from './Point';\r\n\r\nexport default class PieceIndex {\r\n    point: Point;\r\n    piece: Piece | null;\r\n    canMovePoints: Point[] = [];\r\n    constructor(point: Point, piece: Piece | null) {\r\n        this.point = point;\r\n        this.piece = piece;\r\n    }\r\n\r\n    toCode() {\r\n        return this.piece != null ? `${this.piece.pieceCharCode}${this.point.indexCode}` : null;\r\n    }\r\n\r\n    toPieceCharCode() {\r\n        return this.piece !== null ? this.piece.pieceCharCode : EMPTY_PIECE;\r\n    }\r\n}\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","\r\nimport {\r\n    CELL_COUNT,\r\n    HORIZONTAL_CODE_LETTERS,\r\n    HORIZONTAL_NOTE_LETTERS,\r\n    ROW_NUMBER,\r\n    VERTICAL_NOTE_LETTERS,\r\n} from '../brain/constant';\r\n\r\nexport default class Point {\r\n    x: number;\r\n    y: number;\r\n    get index() {\r\n        return Point.xyToIndex(this.x, this.y);\r\n    }\r\n    get graveyardIndex() {\r\n        return this.x;\r\n    }\r\n    get indexCode() {\r\n        return `${this.h}${this.v}`;\r\n    }\r\n    get title() {\r\n        return `${HORIZONTAL_NOTE_LETTERS[this.x]}${VERTICAL_NOTE_LETTERS[this.y]}`;\r\n    }\r\n    get titleEnglish() {\r\n        return this.indexCode;\r\n    }\r\n    get h() {\r\n        return HORIZONTAL_CODE_LETTERS[this.x];\r\n    }\r\n    get v() {\r\n        return this.y + 1;\r\n    }\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    static xyToIndex(x: number, y: number) {\r\n        return y * ROW_NUMBER + x;\r\n    }\r\n    static indexCodeToXY(indexCode: string) {\r\n        const x = HORIZONTAL_CODE_LETTERS.indexOf(indexCode[0]);\r\n        const y = Number(indexCode[1]) - 1;\r\n        return { x, y };\r\n    }\r\n    static indexCodeToIndex(indexCode: string) {\r\n        const { x, y } = Point.indexCodeToXY(indexCode);\r\n        return Point.xyToIndex(x, y);\r\n    }\r\n    static fromIndexCode(indexCode: string) {\r\n        const { x, y } = Point.indexCodeToXY(indexCode);\r\n        return new Point(x, y);\r\n    }\r\n    static indexToXY(index: number) {\r\n        const x = index % ROW_NUMBER;\r\n        const y = Math.floor(index / ROW_NUMBER);\r\n        return { x, y };\r\n    }\r\n    static fromIndex(index: number) {\r\n        const { x, y } = Point.indexToXY(index);\r\n        return new Point(x, y);\r\n    }\r\n    static fromIndexGraveyardIndex(index: number) {\r\n        return new Point(index, 0);\r\n    }\r\n    static isIndexInBoard(index: number) {\r\n        return index >= 0 && index <= CELL_COUNT - 1;\r\n    }\r\n}\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","import Board from './Board';\r\nimport KqJumped from './KqJumped';\r\nimport KAttacked from './KAttacked';\r\nimport CountUp from './CountUp';\r\nimport Graveyard from './Graveyard';\r\nimport {\r\n    DEFAULT_BOARD_STR,\r\n    STRING_COUNT,\r\n} from './constant';\r\nimport { Captured } from '../kpgn';\r\nimport Move from '../kpgn/Move';\r\nimport Point from './Point';\r\nimport Piece from './Piece';\r\nimport { PieceIndex } from '.';\r\nimport MoveHelper from '../brain/MoveHelper';\r\nimport { PIECE_COLOR_WHITE } from '../brain/constant';\r\n\r\n/**\r\n * Raksa-Eng Notation\r\n * ren: <pieces on board> <turn w|b> <king&queen moved ----|SNsn> <king attack --|Kk> <countUp -.-|-.4> <pieces in graveyard>\r\n */\r\nexport type RENPropType = {\r\n    boardStr: string;\r\n    turnStr: string;\r\n    kqJumpedStr: string;\r\n    kAttackedStr: string;\r\n    countUpStr: string;\r\n    graveyardStr: string;\r\n}\r\nexport default class REN {\r\n    board: Board;\r\n    turn: string;\r\n    kqJumped: KqJumped;\r\n    kAttacked: KAttacked;\r\n    countUp: CountUp;\r\n    graveyard: Graveyard;\r\n    moveHelper: MoveHelper;\r\n    constructor(renProps: RENPropType) {\r\n        this.moveHelper = new MoveHelper();\r\n        this.init(renProps);\r\n    }\r\n\r\n    init({\r\n        boardStr,\r\n        turnStr,\r\n        kqJumpedStr,\r\n        kAttackedStr,\r\n        countUpStr: countUpStr,\r\n        graveyardStr }: RENPropType) {\r\n        // TODO: improve by moving to fromString()\r\n        this.board = new Board(boardStr);\r\n        this.turn = turnStr || PIECE_COLOR_WHITE;\r\n        this.kqJumped = new KqJumped(kqJumpedStr);\r\n        this.kAttacked = new KAttacked(kAttackedStr);\r\n        this.countUp = CountUp.fromString(countUpStr);\r\n        this.graveyard = new Graveyard(graveyardStr);\r\n        const invalidPiecesString = this.isInvalidPieceCount();\r\n        if (invalidPiecesString) {\r\n            let msg = `Invalid piece string board:${boardStr}`;\r\n            msg += `, graveyard:${graveyardStr}, count:${invalidPiecesString}`;\r\n            throw new Error(msg);\r\n        }\r\n        this.moveHelper = new MoveHelper();\r\n    }\r\n\r\n    isInvalidPieceCount() {\r\n        const pieces = this.board.pieceIndices.map((pos) => {\r\n            return pos.piece;\r\n        }).filter((p) => {\r\n            return p !== null;\r\n        }).concat(this.graveyard.pieces).map((p: Piece) => {\r\n            return p.originPiece;\r\n        });\r\n        const piecesCount = pieces.reduce((obj: any, p) => {\r\n            obj[p.pieceCharCode] = obj[p.pieceCharCode] || 0;\r\n            obj[p.pieceCharCode]++;\r\n            return obj;\r\n        }, {});\r\n        const str = Object.keys(piecesCount).map((k) => {\r\n            return `${k}${piecesCount[k]}`;\r\n        }).sort().join('');\r\n        if (str === STRING_COUNT) {\r\n            return false;\r\n        }\r\n        return str;\r\n    }\r\n\r\n    backRen(move: Move) {\r\n        const ren = REN.fromString(this.toString());\r\n        ren.moveBack(move);\r\n        return ren;\r\n    }\r\n\r\n    get isCanMoveNext() {\r\n        return !this.countUp.isCountingOut;\r\n    }\r\n\r\n    move(moveFromIndex: number, moveToIndex: number): Move | null {\r\n        if (!this.isCanMoveNext) {\r\n            return null;\r\n        }\r\n        const piece = this.board.getPieceAtIndex(moveFromIndex);\r\n        if (!piece) {\r\n            return null;\r\n        }\r\n        this.board.setPieceAtIndex(moveFromIndex, null);\r\n        const move = new Move({\r\n            moveFrom: Point.fromIndex(moveFromIndex),\r\n            moveTo: Point.fromIndex(moveToIndex),\r\n            piece: piece.clone(),\r\n        });\r\n        if (move.isUpgrading) {\r\n            piece.upgrade();\r\n        }\r\n        const targetPiece = this.board.getPieceAtIndex(moveToIndex);\r\n        if (targetPiece) {\r\n            this.graveyard.pieces.push(targetPiece);\r\n            move.captured = new Captured({\r\n                fromBoardPoint: Point.fromIndex(moveToIndex),\r\n                toGraveyardPoint: Point.fromIndex(this.graveyard.lastIndex),\r\n                piece: targetPiece,\r\n            });\r\n        }\r\n        this.board.setPieceAtIndex(moveToIndex, piece);\r\n        this.turn = Piece.oppositeColor(piece.color);\r\n        move.setRen(this);\r\n        return move;\r\n    }\r\n\r\n    moveBack(move: Move) {\r\n        const movedToIndex = move.moveTo.index;\r\n        const movedFromIndex = move.moveFrom.index;\r\n        const piece = this.board.getPieceAtIndex(movedToIndex);\r\n        this.board.setPieceAtIndex(movedToIndex, null);\r\n        if (!piece) {\r\n            return false;\r\n        }\r\n        this.board.setPieceAtIndex(movedFromIndex, piece);\r\n        if (move.captured) {\r\n            const movedToGYIndex = move.captured.toGraveyardPoint.index;\r\n            const capturedPiece = this.graveyard.get(movedToGYIndex);\r\n            this.board.setPieceAtIndex(movedToIndex, capturedPiece);\r\n            this.graveyard.removeAtIndex(movedToGYIndex);\r\n        }\r\n        if (move.kqJumping.whiteKing) {\r\n            this.kqJumped.whiteKing = false;\r\n        }\r\n        if (move.kqJumping.whiteQueen) {\r\n            this.kqJumped.whiteQueen = false;\r\n        }\r\n        if (move.kqJumping.blackKing) {\r\n            this.kqJumped.blackKing = false;\r\n        }\r\n        if (move.kqJumping.blackQueen) {\r\n            this.kqJumped.blackQueen = false;\r\n        }\r\n        if (this.countUp) {\r\n            this.countUp.clear();\r\n        }\r\n        this.turn = piece.color;\r\n        return true;\r\n    }\r\n\r\n    static fromString(renStr?: string) {\r\n        if (!renStr) {\r\n            renStr = DEFAULT_BOARD_STR;\r\n        }\r\n        const renArr = renStr.split(' ');\r\n        return new REN({\r\n            boardStr: renArr[0],\r\n            turnStr: renArr[1],\r\n            kqJumpedStr: renArr[2],\r\n            kAttackedStr: renArr[3],\r\n            countUpStr: renArr[4],\r\n            graveyardStr: renArr[5],\r\n        });\r\n    }\r\n\r\n    toString() {\r\n        let str = this.board.toString();\r\n        str += ` ${this.turn.toString()}`;\r\n        str += ` ${this.kqJumped.toString()}`;\r\n        str += ` ${this.kAttacked.toString()}`;\r\n        str += ` ${this.countUp.toString()}`;\r\n        str += ` ${this.graveyard.toString()}`;\r\n        return str;\r\n    }\r\n\r\n    get isQueenMoved() {\r\n        const isQueenMoved = Piece.isWhiteColor(this.turn) && this.kqJumped.whiteQueen ||\r\n            Piece.isBlackColor(this.turn) && this.kqJumped.blackQueen;\r\n        return isQueenMoved;\r\n    }\r\n    get isKingMoved() {\r\n        const isKingMoved = Piece.isWhiteColor(this.turn) && this.kqJumped.whiteKing ||\r\n            Piece.isBlackColor(this.turn) && this.kqJumped.blackKing;\r\n        return isKingMoved;\r\n    }\r\n    genAllCanMoves(): PieceIndex[] {\r\n        const canMoves = this.moveHelper.calcCanMove({\r\n            piecesString: this.board.toStringFullNoSeparate(),\r\n            currentTurn: this.turn,\r\n            isQueenMoved: this.isQueenMoved,\r\n            isKingMoved: this.isKingMoved,\r\n            genCanMove: true,\r\n            genCanMoveForAnother: false,\r\n        });\r\n        return canMoves.moves;\r\n    }\r\n    isHasMoved(piece: Piece) {\r\n        let isHasMoved = false;\r\n        if ((this.kqJumped.blackKing && piece.isColorBlack && piece.isTypeKing) ||\r\n            (this.kqJumped.whiteKing && piece.isColorWhite && piece.isTypeKing) ||\r\n            (this.kqJumped.blackQueen && piece.isColorBlack && piece.isTypeQueen) ||\r\n            (this.kqJumped.whiteQueen && piece.isColorWhite && piece.isTypeQueen)) {\r\n            isHasMoved = true;\r\n        }\r\n        return isHasMoved;\r\n    }\r\n    getCanMovePointsByPoint(point: Point): Point[] {\r\n        const piece = this.board.getPieceAtIndex(point.index);\r\n        if (piece === null) {\r\n            return [];\r\n        }\r\n        return this.moveHelper.genCanMovePointsByPiecePoint(point, piece,\r\n            this.board.toStringFullNoSeparate(), this.isHasMoved(piece));\r\n    }\r\n\r\n    checkBoardStatus(move: Move, force?: boolean) {\r\n        const piecesString = this.board.toStringFullNoSeparate();\r\n        // TODO: optimize by specific color\r\n        const state = this.moveHelper.calcState({\r\n            piecesString,\r\n            currentTurn: this.turn,\r\n            isQueenMoved: this.isQueenMoved,\r\n            isKingMoved: this.isKingMoved,\r\n            genCanMove: false,\r\n            genCanMoveForAnother: false,\r\n        });\r\n\r\n        const kingInDanger = state.blackKingInDanger || state.whiteKingInDanger;\r\n        if (kingInDanger) {\r\n            const pieceIndex = kingInDanger.map((point) => {\r\n                return new PieceIndex(point, this.board.getPieceAtIndex(point.index));\r\n            }).filter((pieceIndex) => {\r\n                return pieceIndex.piece !== null && !pieceIndex.piece.isTypeKing;\r\n            })[0];\r\n            move.boardStatus.attacker = pieceIndex;\r\n        }\r\n        move.boardStatus.winColor = state.winColor;\r\n        move.boardStatus.stuckColor = state.stuckColor;\r\n    }\r\n\r\n    checkCountStatus(move: Move, force?: boolean) {\r\n        if (move.isCanMoveNext) {\r\n            const piecesString = this.board.toStringFullNoSeparate();\r\n            if (this.countUp.isCounting) {\r\n                move.isStartCounting = false;\r\n                this.countUp.checkUp(move.piece.color);\r\n                if (this.countUp.isCountingOut) {\r\n                    move.boardStatus.drawCountColor = this.countUp.color;\r\n                }\r\n            } else {\r\n                const color = Piece.oppositeColor(move.piece.color);\r\n                const countState = this.moveHelper.calCount({\r\n                    color: Piece.oppositeColor(move.piece.color),\r\n                    piecesString,\r\n                    force: !!force,\r\n                });\r\n                if (countState) {\r\n                    this.countUp.set(color, countState.countingToNumber, countState.countingNumber);\r\n                    move.isStartCounting = true;\r\n                }\r\n            }\r\n        }\r\n        move.syncRen(this);\r\n    }\r\n\r\n    getWinColor(): string | null {\r\n        const state = this.moveHelper.calcState({\r\n            piecesString: this.board.toStringFullNoSeparate(),\r\n            currentTurn: this.turn,\r\n            isQueenMoved: this.isQueenMoved,\r\n            isKingMoved: this.isKingMoved,\r\n            genCanMove: false,\r\n            genCanMoveForAnother: false,\r\n        });\r\n        return state.winColor;\r\n    }\r\n    syncWithMove(move: Move) {\r\n        if (move) {\r\n            const countUp = this.countUp;\r\n            if (countUp.isCounting && this.turn !== countUp.color && !move.isStartCounting) {\r\n                countUp.isCountingUp = true;\r\n            }\r\n        }\r\n    }\r\n}\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","// BHGQKGHB/8/FFFFFFFF/8/8/ffffffff/8/bhgkqghb w ---- -- -.-\r\nexport const STRING_COUNT = 'B2F8G2H2K1Q1b2f8g2h2k1q1';\r\n// BHGQKGHB/8/FFFFFFFF/8/8/ffffffff/8/bhgkqghb w ---- -- -.-\r\nexport const DEFAULT_BOARD_STR = 'BHGKQGHB/8/FFFFFFFF/8/8/ffffffff/8/bhgqkghb';\r\nexport const NOT_SET = '-';\r\nexport const PIECE_FLAG_KILL = '<';\r\nexport const PIECE_FLAG_JUMP = '^';\r\nexport const PIECE_FLAG_UPGRADE = '*';\r\nexport const PIECE_FLAG_START_COUNTING = '#';\r\nexport const EVENT_FLAG_ATTACK = 'attack';\r\nexport const EVENT_FLAG_WIN = 'win';\r\nexport const EVENT_FLAG_DRAW = 'draw';\r\nexport const EVENT_FLAG_START_COUNTING = 'start-counting';\r\nexport const EVENT_FLAG_COUNTING_UP = 'counting-up';\r\nexport const EVENT_FLAG_COUNT_UP_OUT = 'count-up-out';\r\nexport const EVENT_FLAG_MOVING = 'moving';\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","export { default as Board } from './Board';\r\nexport { default as CountUp } from './CountUp';\r\nexport { default as Graveyard } from './Graveyard';\r\nexport { default as KAttacked } from './KAttacked';\r\nexport { default as KqJumped } from './KqJumped';\r\nexport { default as Piece } from './Piece';\r\nexport { default as PieceIndex } from './PieceIndex';\r\nexport { default as REN } from './REN';\r\nexport { RENPropType } from './REN';\r\nexport { default as Point } from './Point';\r\nexport * from './constant';\r\n/*\r\n * Copyright (c) 2021, K4us\r\n * Author: Raksa Eng <eng.raksa@gmail.com>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *---------------------------------------------------------------------------- */","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(303);\n"],"names":["root","factory","exports","module","define","amd","a","i","self","renStr","ren","fromString","this","kpgn","loadKpng","option","fromJson","resetBoard","getCanMoves","genAllCanMoves","getCanMovePointsByPoint","point","validateRENStr","valid","error_number","error","message","getRENStr","toString","board","piecesMultiArray","pieces","graveyard","getKPGN","toJson","loadKpgn","kpgnJosn","options","drawAscii","turn","move","moveFromIndex","moveToIndex","addMove","clearBoard","getHistories","moves","toKhmerNum","englishNum","split","map","c","VERTICAL_NOTE_LETTERS","VERTICAL_NOTE_LETTERS_ENGLISH","indexOf","join","title","name","version","KhmerChess","h","v","isUndefined","Number","HORIZONTAL_CODE_LETTERS","isWhiteColor","currentTurn","init","piecesString","isQueenMoved","isKingMoved","genCanMove","genCanMoveForAnother","whiteMoves","blackMoves","whiteKingInDanger","whiteKingWillInDanger","blackKingInDanger","blackKingWillInDanger","winColor","stuckColor","generateCanMoves","filter","filterPieceInBoard","whitePieces","blackPieces","genMoves","pieceIndices","forEach","pieceIndex","isHaveMoved","piece","isTypeKing","isTypeQueen","canMovePoints","genCanMovePointsByPiecePoint","cleanPieceNoMove","cleanMoves","isTrue","length","splice","checkIfKingInDanger","getKingInDanger","PIECE_COLOR_WHITE","getKingWillInDanger","PIECE_COLOR_BLACK","genWinLost","getStuck","isWhiteTurn","calcCanMove","anotherMoves","calcState","calCount","color","force","checkCount","isHasMoved","index","x","y","width","height","isContainsPoint","isValidPoint","Rectangle","ROW_LAST_INDEX","mask","countingNumber","countingToNumber","CountUpState","convertMask","point1","sign","point2","fromIndex","getCharPieceFromString","isIndexInBoard","CELL_COUNT","EMPTY_PIECE","getCharPieceInPos","getPieceByIndex","charCode","isValidPiece","fromCharCode","getPieceCanMovePoses","type","_pos","newIndex","push","getPieceCanMovePosesValid","_poses","n","thisPos","p","distPiece","isTypeFish","isTypeBoat","_x","_y","_n","Math","abs","_s","xyToIndex","isNull","replacePiecesStringAtIndex","substring","injectPiece","index1","index2","isCharPiecesInBoard","kingPos","PIECE_TYPE_KING","pieceCharCode","j","isHaveCaptured","points","str","code","getPiecesInBoard","ROW_NUMBER","PieceIndex","isColorWhite","extractPiecesToArray","piecesStringArr","pieceAll","isStateCount","checkCountable","weaker","stronger","oppositeColor","countChar","PIECE_TYPE_FISH","count","toukCount","PIECE_TYPE_BOAT","PIECE_TYPE_GENERAL","PIECE_TYPE_HORSE","start","isUpgradable","isColorBlack","BoardHelper","COLOR_NAMES","COLOR_NAMES_ENGLISH","PIECE_TYPE_QUEEN","PIECE_TYPE_TRANSFORM_FISH","PIECE_NAMES","PIECE_NAMES_ENGLISH","PIECE_COLOR_EMPTY","BOARD_SEPARATOR","ROW_FIRST_INDEX","HORIZONTAL_NOTE_LETTERS","HORIZONTAL_NOTE_LETTERS_ENGLISH","Array","from","_","concat","default","jsis","isValid","isString","isNotEmpty","isValidString","isNumber","isStringNumber","isNaN","isArray","arr","isFunction","f","isObject","o","Object","isBoolean","b","isValidBoolean","isFalse","isPoint","isValidObject","isValidNumber","isSize","size","isOdd","isEven","isUpperCase","toUpperCase","fromBoardPoint","toGraveyardPoint","event","date","location","players","white","black","result","last","whiteWin","blackWin","timer","latestMove","isCanMoveNext","getMove","loadRENStr","syncWithMove","loadMovesStrings","currentRen","reverse","moveStr","Error","backRen","Date","console","log","m","fromBase64","json","JSON","parse","decode","toBase64","jsStr","stringify","encode","moveFrom","moveTo","isUpgrading","captured","boardStatus","attacker","drawCountColor","isStartCounting","boardHelper","upgrade","kqJumping","KqJumped","setRen","checkBoardStatus","kqJumped","checkKQMoved","checkCountStatus","syncRen","whiteKing","whiteQueen","blackKing","blackQueen","isDraw","fromIndexCode","substr","Move","killIndex","PIECE_FLAG_KILL","match","gyIndex","capturedPiece","get","fromIndexGraveyardIndex","jumpingIndex","PIECE_FLAG_JUMP","fromNumber","PIECE_FLAG_START_COUNTING","pCode","fIndexCode","indexCode","tIndexCode","flags","isJumped","toNumber","PIECE_FLAG_UPGRADE","getJumpingMessage","isEnglish","jump","isWhiteKingJumping","isWhiteQueenJumping","isBlackKingJumping","isBlackQueenJumping","getMessage","titleEnglish","id","win","draw","lost","totalSecond","bonusTime","currentWhite","currentBlack","_onEventListeners","_propEvent","events","_checkPropEvent","_isLockProp","shift","_checkOnEvent","data","_addPropEvent","_guardEventName","eventName","listener","_addOnEventListener","_removeOnEventListener","Base64","_keyStr","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","_utf8_encode","charCodeAt","charAt","replace","String","_utf8_decode","string","utftext","c1","c2","reduce","s","subArr","boardStr","DEFAULT_BOARD_STR","newBoardStr","extract","isValidPiecesString","find","getKing","compress","reg","RegExp","$1","toStringFull","toPieceCharCode","toStringFullNoSeparate","getPieceAtIndex","setPieceAtIndex","isCountingUp","isCounting","isWhite","set","clear","checkUp","countUpStr","NOT_SET","countUp","CountUp","countingUp","countingUpWB","graveyardStr","removeAtIndex","kAttackedStr","toWhiteCharCode","kqJumpedStr","keyCodes","codeKeys","setProp","key","value","applyJumping","propKey","parseInt","Piece","toNormalCharCode","pieceCharCodeWhite","_isTypeEqual","isBlackColor","isWhiteCharCode","isTypeTransformedFish","toBlackCharCode","toLowerCase","onlyPiece","ruler","allPiecesString","some","downgrade","clone","pieceChars","pieceChar","toCode","Point","indexCodeToXY","indexCodeToIndex","indexToXY","floor","renProps","moveHelper","turnStr","kAttacked","invalidPiecesString","isInvalidPieceCount","msg","piecesCount","pos","originPiece","obj","keys","k","sort","STRING_COUNT","REN","moveBack","isCountingOut","targetPiece","Captured","lastIndex","movedToIndex","movedFromIndex","movedToGYIndex","renArr","state","kingInDanger","countState","getWinColor","EVENT_FLAG_ATTACK","EVENT_FLAG_WIN","EVENT_FLAG_DRAW","EVENT_FLAG_START_COUNTING","EVENT_FLAG_COUNTING_UP","EVENT_FLAG_COUNT_UP_OUT","EVENT_FLAG_MOVING","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}